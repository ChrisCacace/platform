{"ast":null,"code":"var _jsxFileName = \"/Users/Cacace/Desktop/platform/platform/client/src/components/posts/PostForm.js\";\nimport React, { useState, Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { addPost } from '../../actions/post';\nimport { Upload, Typography, Modal, Icon, notification, Spin } from 'antd';\nimport { v4 as uuid } from 'uuid';\nimport { UploadFile } from './../api-handler';\nimport 'antd/dist/antd.css';\nconst {\n  Dragger\n} = Upload;\nconst {\n  Title\n} = Typography;\n\nconst PostForm = ({\n  addPost\n}) => {\n  const [text, setText] = useState('');\n  const [uploadFileList, setUploadFileList] = useState([]);\n  const [uploadModalVisibility, setUploadModalVisibility] = useState(false); // const [uploadFile, setUploadFile] = useState();\n\n  const dummyRequest = ({\n    file,\n    onSuccess\n  }) => {\n    setTimeout(() => {\n      onSuccess(\"ok\");\n    }, 0);\n  };\n\n  function notifyUploadProgress(count, total, notifcationKey) {\n    notification.info({\n      key: notifcationKey,\n      message: `Uploading ${count} of ${total} File(s)`,\n      icon: /*#__PURE__*/React.createElement(Spin, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 13\n        }\n      }),\n      placement: \"bottomRight\",\n      duration: 0 // Never Close\n\n    });\n  }\n\n  function endUploadProgressProgress(total, notifcationKey, isSuccess) {\n    if (isSuccess) {\n      notification.success({\n        key: notifcationKey,\n        message: `Done Uploading ${total} File(s)`,\n        placement: \"bottomRight\",\n        duration: 5\n      });\n    } else {\n      notification.error({\n        key: notifcationKey,\n        message: `Failed to Upload ${total} File(s)`,\n        placement: \"bottomRight\",\n        duration: 5\n      });\n    }\n  }\n\n  async function uploadModal_OnOk() {\n    // Verify that user selected a file\n    if (uploadFileList.length === 0) {\n      notification['warning']({\n        message: 'Alert!',\n        description: `Please Select File(s) to Upload.`\n      });\n      return;\n    }\n\n    let filesToUpload = uploadFileList;\n    let notifcationKey = uuid();\n    setUploadFileList([]);\n    setUploadModalVisibility(false);\n    let count = 1;\n    let failedCount = 0;\n    const total = filesToUpload.length;\n    console.log(\"Total Files to Upload...\" + total);\n    notifyUploadProgress(count, total, notifcationKey); // Instead of Uploading One by One Sending Requests in parallel.\n\n    filesToUpload.map(async file => {\n      let res = await UploadFile(file);\n      console.log(res);\n      notifyUploadProgress(count++, total, notifcationKey);\n    }); // await Promise.all(\n    //   filesToUpload.map(async (file) => {\n    //     let res = await UploadFile(file);\n    //     notifyUploadProgress(count++, total, notifcationKey);\n    //     if (res.status === 200) {\n    //       let fileMeta = res.data[0];\n    //      } else {\n    //         failedCount++;\n    //     }\n    //     return res;\n    //   }));\n\n    failedCount > 0 ? endUploadProgressProgress(total, notifcationKey, false) : endUploadProgressProgress(total, notifcationKey, true);\n  }\n\n  function uploadFile_OnChange(changeEvent) {\n    changeEvent.file.status = 'done';\n    setUploadFileList(changeEvent.fileList);\n  }\n\n  ;\n\n  function uploadModal_OnCancel(event) {\n    // Hide File Upload Dialog\n    setUploadModalVisibility(false); // Empty File Upload List\n\n    setUploadFileList([]);\n  }\n\n  ;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"post-form\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"bg-primary p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 9\n    }\n  }, \"Say Something...\")), /*#__PURE__*/React.createElement(\"form\", {\n    className: \"form my-1\",\n    onSubmit: e => {\n      e.preventDefault();\n      addPost({\n        text\n      });\n      setText('');\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"textarea\", {\n    name: \"text\",\n    cols: \"30\",\n    rows: \"5\",\n    placeholder: \"Create a post\",\n    value: text,\n    onChange: e => setText(e.target.value),\n    required: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"submit\",\n    className: \"btn btn-dark my-1\",\n    value: \"Post\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => {\n      setUploadModalVisibility(true);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 9\n    }\n  }, \"upload\")), /*#__PURE__*/React.createElement(Modal, {\n    visible: uploadModalVisibility,\n    okText: \"Submit\",\n    width: \"50%\",\n    onOk: uploadModal_OnOk,\n    onCancel: uploadModal_OnCancel,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Title, {\n    level: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 11\n    }\n  }, \"Select File(s)\"), /*#__PURE__*/React.createElement(Dragger, {\n    name: \"files-dragger\",\n    accept: \".jpg, .jpeg, .png, video/*\",\n    listType: \"picture\",\n    fileList: uploadFileList,\n    multiple: true,\n    customRequest: dummyRequest,\n    onChange: uploadFile_OnChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: \"ant-upload-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 13\n    }\n  }, \"Click or drag files to this area to upload\"), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"ant-upload-hint\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 13\n    }\n  }, \"Support for a single or bulk upload.\")))));\n};\n\nPostForm.propTypes = {\n  addPost: PropTypes.func.isRequired\n};\nexport default connect(null, {\n  addPost\n})(PostForm);","map":{"version":3,"sources":["/Users/Cacace/Desktop/platform/platform/client/src/components/posts/PostForm.js"],"names":["React","useState","Fragment","PropTypes","connect","addPost","Upload","Typography","Modal","Icon","notification","Spin","v4","uuid","UploadFile","Dragger","Title","PostForm","text","setText","uploadFileList","setUploadFileList","uploadModalVisibility","setUploadModalVisibility","dummyRequest","file","onSuccess","setTimeout","notifyUploadProgress","count","total","notifcationKey","info","key","message","icon","placement","duration","endUploadProgressProgress","isSuccess","success","error","uploadModal_OnOk","length","description","filesToUpload","failedCount","console","log","map","res","uploadFile_OnChange","changeEvent","status","fileList","uploadModal_OnCancel","event","e","preventDefault","target","value","propTypes","func","isRequired"],"mappings":"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","sourcesContent":["import React, { useState, Fragment} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { addPost } from '../../actions/post';\r\nimport { Upload, Typography, Modal, Icon, notification, Spin } from 'antd';\r\nimport { v4 as uuid } from 'uuid';\r\nimport {UploadFile} from './../api-handler'\r\n\r\nimport 'antd/dist/antd.css';\r\n\r\nconst { Dragger } = Upload;\r\nconst { Title } = Typography;\r\n\r\nconst PostForm = ({ addPost }) => {\r\n  const [text, setText] = useState('');\r\n  const [uploadFileList, setUploadFileList] = useState([]);\r\n  const [uploadModalVisibility, setUploadModalVisibility] = useState(false);\r\n  // const [uploadFile, setUploadFile] = useState();\r\n\r\n  const dummyRequest = ({ file, onSuccess }) => {\r\n    setTimeout(() => {\r\n      onSuccess(\"ok\");\r\n    }, 0);\r\n  };\r\n\r\n  function notifyUploadProgress(count, total, notifcationKey) {\r\n    notification.info({\r\n      key: notifcationKey,\r\n      message: `Uploading ${count} of ${total} File(s)`,\r\n      icon: <Spin />,\r\n      placement: \"bottomRight\",\r\n      duration: 0, // Never Close\r\n    });\r\n  }\r\n\r\n  function endUploadProgressProgress(total, notifcationKey, isSuccess) {\r\n\r\n    if (isSuccess) {\r\n      notification.success({\r\n        key: notifcationKey,\r\n        message: `Done Uploading ${total} File(s)`,\r\n        placement: \"bottomRight\",\r\n        duration: 5,\r\n      });\r\n    } else {\r\n      notification.error({\r\n        key: notifcationKey,\r\n        message: `Failed to Upload ${total} File(s)`,\r\n        placement: \"bottomRight\",\r\n        duration: 5,\r\n      });\r\n    }\r\n  }\r\n\r\n  async function uploadModal_OnOk() {\r\n    // Verify that user selected a file\r\n    if (uploadFileList.length === 0) {\r\n      notification['warning']({\r\n        message: 'Alert!',\r\n        description:\r\n          `Please Select File(s) to Upload.`,\r\n      });\r\n      return;\r\n    }\r\n\r\n    let filesToUpload = uploadFileList;\r\n    let notifcationKey = uuid();\r\n    setUploadFileList([]);\r\n    setUploadModalVisibility(false);\r\n\r\n    let count = 1;\r\n    let failedCount = 0;\r\n    const total = filesToUpload.length;\r\n    console.log(\"Total Files to Upload...\"+total);\r\n    notifyUploadProgress(count, total, notifcationKey);\r\n    // Instead of Uploading One by One Sending Requests in parallel.\r\n    filesToUpload.map(async (file) => {\r\n      let res = await UploadFile(file);\r\n      console.log(res);\r\n      notifyUploadProgress(count++, total, notifcationKey);\r\n    });\r\n\r\n    // await Promise.all(\r\n    //   filesToUpload.map(async (file) => {\r\n    //     let res = await UploadFile(file);\r\n    //     notifyUploadProgress(count++, total, notifcationKey);\r\n    //     if (res.status === 200) {\r\n    //       let fileMeta = res.data[0];\r\n    //      } else {\r\n    //         failedCount++;\r\n    //     }\r\n    //     return res;\r\n    //   }));\r\n\r\n    failedCount > 0\r\n      ? endUploadProgressProgress(total, notifcationKey, false)\r\n      : endUploadProgressProgress(total, notifcationKey, true);\r\n\r\n  }\r\n  function uploadFile_OnChange(changeEvent) {\r\n    changeEvent.file.status = 'done';\r\n    setUploadFileList(changeEvent.fileList);\r\n  };\r\n  function uploadModal_OnCancel(event) {\r\n    // Hide File Upload Dialog\r\n    setUploadModalVisibility(false);\r\n\r\n    // Empty File Upload List\r\n    setUploadFileList([]);\r\n  };\r\n\r\n  return (\r\n    <div className='post-form'>\r\n      <div className='bg-primary p'>\r\n        <h3>Say Something...</h3>\r\n      </div>\r\n      <form\r\n            className='form my-1'\r\n            onSubmit={e => {\r\n              e.preventDefault();\r\n              addPost({ text });\r\n              setText('');\r\n            }}>\r\n        <textarea\r\n          name='text'\r\n          cols='30'\r\n          rows='5'\r\n          placeholder='Create a post'\r\n          value={text}\r\n          onChange={e => setText(e.target.value)}\r\n          required\r\n        />\r\n        <input type='submit' className='btn btn-dark my-1' value='Post' />\r\n        <button onClick={ () => {setUploadModalVisibility(true)}}>upload</button>\r\n        </form>\r\n\r\n        <Modal  visible={uploadModalVisibility}\r\n                okText={\"Submit\"}\r\n                width=\"50%\"\r\n                onOk={uploadModal_OnOk}\r\n                onCancel={uploadModal_OnCancel}>\r\n        <Fragment>\r\n          <Title level={3}>Select File(s)</Title>\r\n          <Dragger name='files-dragger'\r\n            accept='.jpg, .jpeg, .png, video/*'\r\n            listType='picture'\r\n            fileList={uploadFileList}\r\n            multiple={true}\r\n            customRequest={dummyRequest}\r\n            onChange={uploadFile_OnChange}>\r\n            {/* <p className=\"ant-upload-drag-icon\">\r\n              <Icon type=\"inbox\" />\r\n            </p> */}\r\n            <p className=\"ant-upload-text\">Click or drag files to this area to upload</p>\r\n            <p className=\"ant-upload-hint\">\r\n              Support for a single or bulk upload. \r\n            </p>\r\n          </Dragger>\r\n        </Fragment>\r\n      </Modal>\r\n\r\n    </div>\r\n  );\r\n};\r\n\r\nPostForm.propTypes = {\r\n  addPost: PropTypes.func.isRequired\r\n};\r\n\r\nexport default connect(\r\n  null,\r\n  { addPost }\r\n)(PostForm);\r\n"]},"metadata":{},"sourceType":"module"}