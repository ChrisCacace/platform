{"ast":null,"code":"import { UserAgentApplication } from \"msal\";\nexport const requiresInteraction = errorMessage => {\n  if (!errorMessage || !errorMessage.length) {\n    return false;\n  }\n\n  return errorMessage.indexOf(\"consent_required\") > -1 || errorMessage.indexOf(\"interaction_required\") > -1 || errorMessage.indexOf(\"login_required\") > -1;\n};\nexport const fetchMsGraph = async (url, accessToken) => {\n  const response = await fetch(url, {\n    headers: {\n      Authorization: \"Bearer \".concat(accessToken)\n    }\n  });\n  return response.json();\n};\nexport const isIE = () => {\n  const ua = window.navigator.userAgent;\n  const msie = ua.indexOf(\"MSIE \") > -1;\n  const msie11 = ua.indexOf(\"Trident/\") > -1; // If you as a developer are testing using Edge InPrivate mode, please add \"isEdge\" to the if check\n  // const isEdge = ua.indexOf(\"Edge/\") > -1;\n\n  return msie || msie11;\n};\nexport const GRAPH_SCOPES = {\n  OPENID: \"openid\",\n  PROFILE: \"profile\",\n  USER_READ: \"User.Read\",\n  MAIL_READ: \"Mail.Read\"\n};\nexport const GRAPH_ENDPOINTS = {\n  ME: \"https://graph.microsoft.com/v1.0/me\",\n  MAIL: \"https://graph.microsoft.com/v1.0/me/messages\"\n};\nexport const GRAPH_REQUESTS = {\n  LOGIN: {\n    scopes: [GRAPH_SCOPES.OPENID, GRAPH_SCOPES.PROFILE, GRAPH_SCOPES.USER_READ]\n  },\n  EMAIL: {\n    scopes: [GRAPH_SCOPES.MAIL_READ]\n  }\n};\nexport const msalApp = new UserAgentApplication({\n  auth: {\n    clientId: \"ce5d1a2b-20a7-4f63-adde-6f0168cc29e5\",\n    authority: \"https://b2cmern.b2clogin.com/b2cmern.onmicrosoft.com/B2C_1_signupsignin\",\n    validateAuthority: true,\n    postLogoutRedirectUri: \"http://localhost:3000\",\n    navigateToLoginRequestUrl: false\n  },\n  cache: {\n    cacheLocation: \"localStorage\",\n    storeAuthStateInCookie: true\n  },\n  system: {\n    navigateFrameWait: 0,\n    logger: {\n      error: console.error,\n      errorPii: console.error,\n      info: console.log,\n      infoPii: console.log,\n      verbose: console.log,\n      verbosePii: console.log,\n      warning: console.warn,\n      warningPii: console.warn\n    }\n  }\n});","map":{"version":3,"sources":["D:/Projects/devconnector_2.0/client/src/utils/auth-utils.js"],"names":["UserAgentApplication","requiresInteraction","errorMessage","length","indexOf","fetchMsGraph","url","accessToken","response","fetch","headers","Authorization","json","isIE","ua","window","navigator","userAgent","msie","msie11","GRAPH_SCOPES","OPENID","PROFILE","USER_READ","MAIL_READ","GRAPH_ENDPOINTS","ME","MAIL","GRAPH_REQUESTS","LOGIN","scopes","EMAIL","msalApp","auth","clientId","authority","validateAuthority","postLogoutRedirectUri","navigateToLoginRequestUrl","cache","cacheLocation","storeAuthStateInCookie","system","navigateFrameWait","logger","error","console","errorPii","info","log","infoPii","verbose","verbosePii","warning","warn","warningPii"],"mappings":"AAAA,SAASA,oBAAT,QAAqC,MAArC;AAEA,OAAO,MAAMC,mBAAmB,GAAGC,YAAY,IAAI;AAC/C,MAAI,CAACA,YAAD,IAAiB,CAACA,YAAY,CAACC,MAAnC,EAA2C;AACvC,WAAO,KAAP;AACH;;AAED,SACID,YAAY,CAACE,OAAb,CAAqB,kBAArB,IAA2C,CAAC,CAA5C,IACAF,YAAY,CAACE,OAAb,CAAqB,sBAArB,IAA+C,CAAC,CADhD,IAEAF,YAAY,CAACE,OAAb,CAAqB,gBAArB,IAAyC,CAAC,CAH9C;AAKH,CAVM;AAYP,OAAO,MAAMC,YAAY,GAAG,OAAOC,GAAP,EAAYC,WAAZ,KAA4B;AACpD,QAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACH,GAAD,EAAM;AAC9BI,IAAAA,OAAO,EAAE;AACLC,MAAAA,aAAa,mBAAYJ,WAAZ;AADR;AADqB,GAAN,CAA5B;AAMA,SAAOC,QAAQ,CAACI,IAAT,EAAP;AACH,CARM;AAUP,OAAO,MAAMC,IAAI,GAAG,MAAM;AACtB,QAAMC,EAAE,GAAGC,MAAM,CAACC,SAAP,CAAiBC,SAA5B;AACA,QAAMC,IAAI,GAAGJ,EAAE,CAACV,OAAH,CAAW,OAAX,IAAsB,CAAC,CAApC;AACA,QAAMe,MAAM,GAAGL,EAAE,CAACV,OAAH,CAAW,UAAX,IAAyB,CAAC,CAAzC,CAHsB,CAKtB;AACA;;AAEA,SAAOc,IAAI,IAAIC,MAAf;AACH,CATM;AAWP,OAAO,MAAMC,YAAY,GAAG;AACxBC,EAAAA,MAAM,EAAE,QADgB;AAExBC,EAAAA,OAAO,EAAE,SAFe;AAGxBC,EAAAA,SAAS,EAAE,WAHa;AAIxBC,EAAAA,SAAS,EAAE;AAJa,CAArB;AAOP,OAAO,MAAMC,eAAe,GAAG;AAC3BC,EAAAA,EAAE,EAAE,qCADuB;AAE3BC,EAAAA,IAAI,EAAE;AAFqB,CAAxB;AAKP,OAAO,MAAMC,cAAc,GAAG;AAC1BC,EAAAA,KAAK,EAAE;AACHC,IAAAA,MAAM,EAAE,CACJV,YAAY,CAACC,MADT,EAEJD,YAAY,CAACE,OAFT,EAGJF,YAAY,CAACG,SAHT;AADL,GADmB;AAQ1BQ,EAAAA,KAAK,EAAE;AACHD,IAAAA,MAAM,EAAE,CAACV,YAAY,CAACI,SAAd;AADL;AARmB,CAAvB;AAaP,OAAO,MAAMQ,OAAO,GAAG,IAAIhC,oBAAJ,CAAyB;AAC5CiC,EAAAA,IAAI,EAAE;AACFC,IAAAA,QAAQ,EAAE,sCADR;AAEFC,IAAAA,SAAS,EAAE,yEAFT;AAGFC,IAAAA,iBAAiB,EAAE,IAHjB;AAIFC,IAAAA,qBAAqB,EAAE,uBAJrB;AAKFC,IAAAA,yBAAyB,EAAE;AALzB,GADsC;AAQ5CC,EAAAA,KAAK,EAAE;AACHC,IAAAA,aAAa,EAAE,cADZ;AAEHC,IAAAA,sBAAsB,EAAE;AAFrB,GARqC;AAY5CC,EAAAA,MAAM,EAAE;AACJC,IAAAA,iBAAiB,EAAE,CADf;AAEJC,IAAAA,MAAM,EAAE;AACJC,MAAAA,KAAK,EAAEC,OAAO,CAACD,KADX;AAEJE,MAAAA,QAAQ,EAAED,OAAO,CAACD,KAFd;AAGJG,MAAAA,IAAI,EAAEF,OAAO,CAACG,GAHV;AAIJC,MAAAA,OAAO,EAAEJ,OAAO,CAACG,GAJb;AAKJE,MAAAA,OAAO,EAAEL,OAAO,CAACG,GALb;AAMJG,MAAAA,UAAU,EAAEN,OAAO,CAACG,GANhB;AAOJI,MAAAA,OAAO,EAAEP,OAAO,CAACQ,IAPb;AAQJC,MAAAA,UAAU,EAAET,OAAO,CAACQ;AARhB;AAFJ;AAZoC,CAAzB,CAAhB","sourcesContent":["import { UserAgentApplication } from \"msal\";\r\n\r\nexport const requiresInteraction = errorMessage => {\r\n    if (!errorMessage || !errorMessage.length) {\r\n        return false;\r\n    }\r\n\r\n    return (\r\n        errorMessage.indexOf(\"consent_required\") > -1 ||\r\n        errorMessage.indexOf(\"interaction_required\") > -1 ||\r\n        errorMessage.indexOf(\"login_required\") > -1\r\n    );\r\n};\r\n\r\nexport const fetchMsGraph = async (url, accessToken) => {\r\n    const response = await fetch(url, {\r\n        headers: {\r\n            Authorization: `Bearer ${accessToken}`\r\n        }\r\n    });\r\n\r\n    return response.json();\r\n};\r\n\r\nexport const isIE = () => {\r\n    const ua = window.navigator.userAgent;\r\n    const msie = ua.indexOf(\"MSIE \") > -1;\r\n    const msie11 = ua.indexOf(\"Trident/\") > -1;\r\n\r\n    // If you as a developer are testing using Edge InPrivate mode, please add \"isEdge\" to the if check\r\n    // const isEdge = ua.indexOf(\"Edge/\") > -1;\r\n\r\n    return msie || msie11;\r\n};\r\n\r\nexport const GRAPH_SCOPES = {\r\n    OPENID: \"openid\",\r\n    PROFILE: \"profile\",\r\n    USER_READ: \"User.Read\",\r\n    MAIL_READ: \"Mail.Read\"\r\n};\r\n\r\nexport const GRAPH_ENDPOINTS = {\r\n    ME: \"https://graph.microsoft.com/v1.0/me\",\r\n    MAIL: \"https://graph.microsoft.com/v1.0/me/messages\"\r\n};\r\n\r\nexport const GRAPH_REQUESTS = {\r\n    LOGIN: {\r\n        scopes: [\r\n            GRAPH_SCOPES.OPENID,\r\n            GRAPH_SCOPES.PROFILE,\r\n            GRAPH_SCOPES.USER_READ\r\n        ]\r\n    },\r\n    EMAIL: {\r\n        scopes: [GRAPH_SCOPES.MAIL_READ]\r\n    }\r\n};\r\n\r\nexport const msalApp = new UserAgentApplication({\r\n    auth: {\r\n        clientId: \"ce5d1a2b-20a7-4f63-adde-6f0168cc29e5\",\r\n        authority: \"https://b2cmern.b2clogin.com/b2cmern.onmicrosoft.com/B2C_1_signupsignin\",\r\n        validateAuthority: true,\r\n        postLogoutRedirectUri: \"http://localhost:3000\",\r\n        navigateToLoginRequestUrl: false\r\n    },\r\n    cache: {\r\n        cacheLocation: \"localStorage\",\r\n        storeAuthStateInCookie: true\r\n    },\r\n    system: {\r\n        navigateFrameWait: 0,\r\n        logger: {\r\n            error: console.error,\r\n            errorPii: console.error,\r\n            info: console.log,\r\n            infoPii: console.log,\r\n            verbose: console.log,\r\n            verbosePii: console.log,\r\n            warning: console.warn,\r\n            warningPii: console.warn\r\n        }\r\n    }\r\n});"]},"metadata":{},"sourceType":"module"}