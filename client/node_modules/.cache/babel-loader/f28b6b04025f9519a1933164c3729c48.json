{"ast":null,"code":"import * as Msal from 'msal';\nexport default function Auth() {\n  const msalConfig = {\n    auth: {\n      clientId: \"ce5d1a2b-20a7-4f63-adde-6f0168cc29e5\",\n      authority: \"https://b2cmern.b2clogin.com/b2cmern.onmicrosoft.com/B2C_1_signupsignin\",\n      validateAuthority: false\n    },\n    cache: {\n      cacheLocation: \"localStorage\",\n      storeAuthStateInCookie: true\n    }\n  };\n  return new Promise((resolve, reject) => {\n    const userAgentApplication = new Msal.UserAgentApplication(msalConfig, null, function (errorDes, token, error, tokenType) {});\n    console.log('inside the promise');\n    return this.app.loginRedirect(this.loginRequest);\n    userAgentApplication.loginPopup([\"user.read\"]).then(token => {\n      console.log(\"Successfully got id token\");\n      console.log(\"first token: \", token);\n      console.log(userAgentApplication.getUser().name);\n\n      if (userAgentApplication.getUser()) {\n        userAgentApplication.acquireTokenSilent([\"user.read\"]).then(token => {\n          resolve(token);\n        }).catch(error => {\n          reject(error);\n        });\n      } else {\n        reject(\"User not logged in\");\n      }\n    }).catch(error => {\n      reject(error);\n    });\n  });\n}","map":{"version":3,"sources":["D:/Projects/devconnector_2.0/client/src/utils/AuthPromise.js"],"names":["Msal","Auth","msalConfig","auth","clientId","authority","validateAuthority","cache","cacheLocation","storeAuthStateInCookie","Promise","resolve","reject","userAgentApplication","UserAgentApplication","errorDes","token","error","tokenType","console","log","app","loginRedirect","loginRequest","loginPopup","then","getUser","name","acquireTokenSilent","catch"],"mappings":"AAAA,OAAO,KAAKA,IAAZ,MAAsB,MAAtB;AAEA,eAAe,SAASC,IAAT,GAAgB;AAC3B,QAAMC,UAAU,GAAG;AACfC,IAAAA,IAAI,EAAE;AACFC,MAAAA,QAAQ,EAAE,sCADR;AAEFC,MAAAA,SAAS,EAAE,yEAFT;AAGFC,MAAAA,iBAAiB,EAAE;AAHjB,KADS;AAMfC,IAAAA,KAAK,EAAE;AACHC,MAAAA,aAAa,EAAE,cADZ;AAEHC,MAAAA,sBAAsB,EAAE;AAFrB;AANQ,GAAnB;AAYA,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACpC,UAAMC,oBAAoB,GAAG,IAAIb,IAAI,CAACc,oBAAT,CAA8BZ,UAA9B,EAA0C,IAA1C,EAAgD,UAAUa,QAAV,EAAoBC,KAApB,EAA2BC,KAA3B,EAAkCC,SAAlC,EAA6C,CAEzH,CAF4B,CAA7B;AAIAC,IAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AACA,WAAO,KAAKC,GAAL,CAASC,aAAT,CAAuB,KAAKC,YAA5B,CAAP;AAEAV,IAAAA,oBAAoB,CAACW,UAArB,CAAgC,CAAC,WAAD,CAAhC,EACKC,IADL,CACWT,KAAD,IAAW;AACbG,MAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BJ,KAA7B;AACAG,MAAAA,OAAO,CAACC,GAAR,CAAYP,oBAAoB,CAACa,OAArB,GAA+BC,IAA3C;;AAEA,UAAId,oBAAoB,CAACa,OAArB,EAAJ,EAAoC;AAChCb,QAAAA,oBAAoB,CAACe,kBAArB,CAAwC,CAAC,WAAD,CAAxC,EACKH,IADL,CACWT,KAAD,IAAW;AACbL,UAAAA,OAAO,CAACK,KAAD,CAAP;AACH,SAHL,EAIKa,KAJL,CAIYZ,KAAD,IAAW;AACdL,UAAAA,MAAM,CAACK,KAAD,CAAN;AACH,SANL;AAOH,OARD,MAQO;AACHL,QAAAA,MAAM,CAAC,oBAAD,CAAN;AACH;AACJ,KAjBL,EAkBKiB,KAlBL,CAkBYZ,KAAD,IAAW;AACdL,MAAAA,MAAM,CAACK,KAAD,CAAN;AACH,KApBL;AAqBH,GA7BM,CAAP;AA8BH","sourcesContent":["import * as Msal from 'msal';\r\n\r\nexport default function Auth() {\r\n    const msalConfig = {\r\n        auth: {\r\n            clientId: \"ce5d1a2b-20a7-4f63-adde-6f0168cc29e5\",\r\n            authority: \"https://b2cmern.b2clogin.com/b2cmern.onmicrosoft.com/B2C_1_signupsignin\",\r\n            validateAuthority: false\r\n        },\r\n        cache: {\r\n            cacheLocation: \"localStorage\",\r\n            storeAuthStateInCookie: true\r\n        }\r\n    };\r\n\r\n    return new Promise((resolve, reject) => {\r\n        const userAgentApplication = new Msal.UserAgentApplication(msalConfig, null, function (errorDes, token, error, tokenType) {\r\n            \r\n        });\r\n\r\n        console.log('inside the promise');\r\n        return this.app.loginRedirect(this.loginRequest);\r\n\r\n        userAgentApplication.loginPopup([\"user.read\"])\r\n            .then((token) => {\r\n                console.log(\"Successfully got id token\");\r\n                console.log(\"first token: \", token);\r\n                console.log(userAgentApplication.getUser().name);\r\n\r\n                if (userAgentApplication.getUser()) {\r\n                    userAgentApplication.acquireTokenSilent([\"user.read\"])\r\n                        .then((token) => {\r\n                            resolve(token);\r\n                        })\r\n                        .catch((error) => {\r\n                            reject(error);\r\n                        });\r\n                } else {\r\n                    reject(\"User not logged in\");\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                reject(error);\r\n            });\r\n    });\r\n}"]},"metadata":{},"sourceType":"module"}