{"ast":null,"code":"import * as Msal from 'msal';\nexport default class AuthB2C {\n  constructor() {\n    this.login = () => {\n      // return this.app.loginPopup(this.loginRequest).then(function (loginResponse) {\n      //     // getToken(tokenRequest).then(updateUI);\n      //     console.log(loginResponse)\n      // }).catch(function (error) {\n      //     console.error(error);\n      // });\n      this.app.loginRedirect(this.loginRequest); // return this.app.loginPopup(this.loginRequest).then(\n      //     idToken => {\n      //         console.log(idToken);\n      //         return null;\n      //         // const user = this.app.getUser();\n      //         // if (user) {\n      //         //     return user;\n      //         // } else {\n      //         //     return null;\n      //         // }\n      //     },\n      //     () => {\n      //         return null;\n      //     }\n      // );\n    };\n\n    this.getAccount = () => {\n      return this.app.getAccount();\n    };\n\n    this.authRedirectCallBack = (error, response) => {\n      console.log(response);\n      console.log(response.idToken.rawIdToken);\n      console.log(this.app.getAccount());\n\n      if (error) {\n        console.log(error);\n      } else {\n        if (response.tokenType === \"id_token\" && this.app.getAccount() && !this.app.isCallback(window.location.hash)) {\n          console.log(\"sdfhjdslfjdsljfldsj\");\n          console.log(this.app.getAccount()); // showWelcomeMessage();\n          // acquireTokenRedirectAndCallMSGraph(graphConfig.graphMeEndpoint, loginRequest);\n        } else if (response.tokenType === \"access_token\") {// callMSGraph(graphConfig.graphMeEndpoint, response.accessToken, graphAPICallback);\n        } else {\n          console.log(\"token type is:\" + response.tokenType);\n        }\n      }\n    };\n\n    this.logout = () => {\n      this.app.logout();\n    };\n\n    this.getToken = () => {\n      return this.app.acquireTokenSilent(this.applicationConfig.graphScopes).then(accessToken => {\n        return accessToken;\n      }, error => {\n        return this.app.acquireTokenPopup(this.applicationConfig.graphScopes).then(accessToken => {\n          return accessToken;\n        }, err => {\n          console.error(err);\n        });\n      });\n    };\n\n    var appConfig = {\n      b2cScopes: [\"https://b2cmern.onmicrosoft.com/mern/demo.read\"],\n      webApi: \"https://fabrikamb2chello.azurewebsites.net/hello\"\n    };\n    const msalConfig = {\n      auth: {\n        clientId: \"ce5d1a2b-20a7-4f63-adde-6f0168cc29e5\",\n        authority: \"https://b2cmern.b2clogin.com/b2cmern.onmicrosoft.com/B2C_1_signupsignin\",\n        validateAuthority: false\n      },\n      cache: {\n        cacheLocation: \"localStorage\",\n        storeAuthStateInCookie: true\n      }\n    };\n    this.loginRequest = {\n      // scopes: appConfig.b2cScopes\n      scopes: [\"openid\", \"profile\"]\n    }; // request to acquire a token for resource access\n\n    this.tokenRequest = {\n      scopes: appConfig.b2cScopes\n    };\n    this.applicationConfig = {\n      clientID: \"ce5d1a2b-20a7-4f63-adde-6f0168cc29e5\",\n      authority: \"https://b2cmern.b2clogin.com/b2cmern.onmicrosoft.com/B2C_1_signupsignin\"\n    }; // this.app = new Msal.UserAgentApplication(\n    //     this.applicationConfig.clientID,\n    //     this.applicationConfig.authority)\n\n    this.app = new Msal.UserAgentApplication(msalConfig);\n    this.app.handleRedirectCallback(this.authRedirectCallBack);\n  }\n\n}","map":{"version":3,"sources":["D:/Projects/devconnector_2.0/client/src/utils/AuthB2C.js"],"names":["Msal","AuthB2C","constructor","login","app","loginRedirect","loginRequest","getAccount","authRedirectCallBack","error","response","console","log","idToken","rawIdToken","tokenType","isCallback","window","location","hash","logout","getToken","acquireTokenSilent","applicationConfig","graphScopes","then","accessToken","acquireTokenPopup","err","appConfig","b2cScopes","webApi","msalConfig","auth","clientId","authority","validateAuthority","cache","cacheLocation","storeAuthStateInCookie","scopes","tokenRequest","clientID","UserAgentApplication","handleRedirectCallback"],"mappings":"AAAA,OAAO,KAAKA,IAAZ,MAAsB,MAAtB;AAEA,eAAe,MAAMC,OAAN,CAAc;AACzBC,EAAAA,WAAW,GAAG;AAAA,SAyCdC,KAzCc,GAyCN,MAAM;AACV;AACA;AACA;AAEA;AACA;AACA;AAEA,WAAKC,GAAL,CAASC,aAAT,CAAuB,KAAKC,YAA5B,EATU,CAWV;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACH,KApEa;;AAAA,SAsEdC,UAtEc,GAsED,MAAM;AACf,aAAO,KAAKH,GAAL,CAASG,UAAT,EAAP;AACH,KAxEa;;AAAA,SA0EdC,oBA1Ec,GA0ES,CAACC,KAAD,EAAQC,QAAR,KAAqB;AACxCC,MAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYF,QAAQ,CAACG,OAAT,CAAiBC,UAA7B;AAEAH,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKR,GAAL,CAASG,UAAT,EAAZ;;AAEA,UAAIE,KAAJ,EAAW;AACPE,QAAAA,OAAO,CAACC,GAAR,CAAYH,KAAZ;AACH,OAFD,MAEO;AACH,YAAIC,QAAQ,CAACK,SAAT,KAAuB,UAAvB,IAAqC,KAAKX,GAAL,CAASG,UAAT,EAArC,IAA8D,CAAC,KAAKH,GAAL,CAASY,UAAT,CAAoBC,MAAM,CAACC,QAAP,CAAgBC,IAApC,CAAnE,EAA8G;AAC1GR,UAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ;AACAD,UAAAA,OAAO,CAACC,GAAR,CAAY,KAAKR,GAAL,CAASG,UAAT,EAAZ,EAF0G,CAI1G;AACA;AACH,SAND,MAMO,IAAIG,QAAQ,CAACK,SAAT,KAAuB,cAA3B,EAA2C,CAC9C;AACH,SAFM,MAEA;AACHJ,UAAAA,OAAO,CAACC,GAAR,CAAY,mBAAmBF,QAAQ,CAACK,SAAxC;AACH;AACJ;AACJ,KA/Fa;;AAAA,SAiGdK,MAjGc,GAiGL,MAAM;AACX,WAAKhB,GAAL,CAASgB,MAAT;AACH,KAnGa;;AAAA,SAqGdC,QArGc,GAqGH,MAAM;AACb,aAAO,KAAKjB,GAAL,CAASkB,kBAAT,CAA4B,KAAKC,iBAAL,CAAuBC,WAAnD,EAAgEC,IAAhE,CACHC,WAAW,IAAI;AACX,eAAOA,WAAP;AACH,OAHE,EAIHjB,KAAK,IAAI;AACL,eAAO,KAAKL,GAAL,CACFuB,iBADE,CACgB,KAAKJ,iBAAL,CAAuBC,WADvC,EAEFC,IAFE,CAGCC,WAAW,IAAI;AACX,iBAAOA,WAAP;AACH,SALF,EAMCE,GAAG,IAAI;AACHjB,UAAAA,OAAO,CAACF,KAAR,CAAcmB,GAAd;AACH,SARF,CAAP;AAUH,OAfE,CAAP;AAiBH,KAvHa;;AAEV,QAAIC,SAAS,GAAG;AACZC,MAAAA,SAAS,EAAE,CAAC,gDAAD,CADC;AAEZC,MAAAA,MAAM,EAAE;AAFI,KAAhB;AAKA,UAAMC,UAAU,GAAG;AACfC,MAAAA,IAAI,EAAE;AACFC,QAAAA,QAAQ,EAAE,sCADR;AAEFC,QAAAA,SAAS,EAAE,yEAFT;AAGFC,QAAAA,iBAAiB,EAAE;AAHjB,OADS;AAMfC,MAAAA,KAAK,EAAE;AACHC,QAAAA,aAAa,EAAE,cADZ;AAEHC,QAAAA,sBAAsB,EAAE;AAFrB;AANQ,KAAnB;AAYA,SAAKjC,YAAL,GAAoB;AAChB;AACAkC,MAAAA,MAAM,EAAE,CAAC,QAAD,EAAW,SAAX;AAFQ,KAApB,CAnBU,CAwBV;;AACA,SAAKC,YAAL,GAAoB;AAChBD,MAAAA,MAAM,EAAEX,SAAS,CAACC;AADF,KAApB;AAIA,SAAKP,iBAAL,GAAyB;AACrBmB,MAAAA,QAAQ,EAAE,sCADW;AAErBP,MAAAA,SAAS,EAAE;AAFU,KAAzB,CA7BU,CAiCV;AACA;AACA;;AAEA,SAAK/B,GAAL,GAAW,IAAIJ,IAAI,CAAC2C,oBAAT,CAA8BX,UAA9B,CAAX;AACA,SAAK5B,GAAL,CAASwC,sBAAT,CAAgC,KAAKpC,oBAArC;AACH;;AAxCwB","sourcesContent":["import * as Msal from 'msal';\r\n\r\nexport default class AuthB2C {\r\n    constructor() {\r\n\r\n        var appConfig = {\r\n            b2cScopes: [\"https://b2cmern.onmicrosoft.com/mern/demo.read\"],\r\n            webApi: \"https://fabrikamb2chello.azurewebsites.net/hello\"\r\n        };\r\n\r\n        const msalConfig = {\r\n            auth: {\r\n                clientId: \"ce5d1a2b-20a7-4f63-adde-6f0168cc29e5\",\r\n                authority: \"https://b2cmern.b2clogin.com/b2cmern.onmicrosoft.com/B2C_1_signupsignin\",\r\n                validateAuthority: false\r\n            },\r\n            cache: {\r\n                cacheLocation: \"localStorage\",\r\n                storeAuthStateInCookie: true\r\n            }\r\n        };\r\n\r\n        this.loginRequest = {\r\n            // scopes: appConfig.b2cScopes\r\n            scopes: [\"openid\", \"profile\"]\r\n        };\r\n\r\n        // request to acquire a token for resource access\r\n        this.tokenRequest = {\r\n            scopes: appConfig.b2cScopes\r\n        };\r\n\r\n        this.applicationConfig = {\r\n            clientID: \"ce5d1a2b-20a7-4f63-adde-6f0168cc29e5\",\r\n            authority: \"https://b2cmern.b2clogin.com/b2cmern.onmicrosoft.com/B2C_1_signupsignin\"\r\n        }\r\n        // this.app = new Msal.UserAgentApplication(\r\n        //     this.applicationConfig.clientID,\r\n        //     this.applicationConfig.authority)\r\n\r\n        this.app = new Msal.UserAgentApplication(msalConfig);\r\n        this.app.handleRedirectCallback(this.authRedirectCallBack);\r\n    }\r\n\r\n    login = () => {\r\n        // return this.app.loginPopup(this.loginRequest).then(function (loginResponse) {\r\n        //     // getToken(tokenRequest).then(updateUI);\r\n        //     console.log(loginResponse)\r\n\r\n        // }).catch(function (error) {\r\n        //     console.error(error);\r\n        // });\r\n\r\n        this.app.loginRedirect(this.loginRequest);\r\n\r\n        // return this.app.loginPopup(this.loginRequest).then(\r\n        //     idToken => {\r\n        //         console.log(idToken);\r\n\r\n        //         return null;\r\n        //         // const user = this.app.getUser();\r\n        //         // if (user) {\r\n        //         //     return user;\r\n        //         // } else {\r\n        //         //     return null;\r\n        //         // }\r\n        //     },\r\n        //     () => {\r\n        //         return null;\r\n        //     }\r\n        // );\r\n    };\r\n\r\n    getAccount = () => {\r\n        return this.app.getAccount();\r\n    }\r\n\r\n    authRedirectCallBack = (error, response) => {\r\n        console.log(response);\r\n        console.log(response.idToken.rawIdToken);\r\n\r\n        console.log(this.app.getAccount());\r\n\r\n        if (error) {\r\n            console.log(error);\r\n        } else {\r\n            if (response.tokenType === \"id_token\" && this.app.getAccount() && !this.app.isCallback(window.location.hash)) {\r\n                console.log(\"sdfhjdslfjdsljfldsj\");\r\n                console.log(this.app.getAccount());\r\n                \r\n                // showWelcomeMessage();\r\n                // acquireTokenRedirectAndCallMSGraph(graphConfig.graphMeEndpoint, loginRequest);\r\n            } else if (response.tokenType === \"access_token\") {\r\n                // callMSGraph(graphConfig.graphMeEndpoint, response.accessToken, graphAPICallback);\r\n            } else {\r\n                console.log(\"token type is:\" + response.tokenType);\r\n            }\r\n        }\r\n    }\r\n\r\n    logout = () => {\r\n        this.app.logout();\r\n    };\r\n\r\n    getToken = () => {\r\n        return this.app.acquireTokenSilent(this.applicationConfig.graphScopes).then(\r\n            accessToken => {\r\n                return accessToken;\r\n            },\r\n            error => {\r\n                return this.app\r\n                    .acquireTokenPopup(this.applicationConfig.graphScopes)\r\n                    .then(\r\n                        accessToken => {\r\n                            return accessToken;\r\n                        },\r\n                        err => {\r\n                            console.error(err);\r\n                        }\r\n                    );\r\n            }\r\n        );\r\n    };\r\n}"]},"metadata":{},"sourceType":"module"}