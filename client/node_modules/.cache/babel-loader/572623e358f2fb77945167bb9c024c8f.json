{"ast":null,"code":"import * as Msal from 'msal';\nexport default class AuthB2C {\n  constructor() {\n    this.login = () => {\n      // return this.app.loginPopup(this.loginRequest).then(function (loginResponse) {\n      //     // getToken(tokenRequest).then(updateUI);\n      //     console.log(loginResponse)\n      // }).catch(function (error) {\n      //     console.error(error);\n      // });\n      return this.app.loginPopup(this.applicationConfig.graphScopes).then(idToken => {\n        const user = this.app.getUser();\n\n        if (user) {\n          return user;\n        } else {\n          return null;\n        }\n      }, () => {\n        return null;\n      });\n    };\n\n    this.logout = () => {\n      this.app.logout();\n    };\n\n    this.getToken = () => {\n      return this.app.acquireTokenSilent(this.applicationConfig.graphScopes).then(accessToken => {\n        return accessToken;\n      }, error => {\n        return this.app.acquireTokenPopup(this.applicationConfig.graphScopes).then(accessToken => {\n          return accessToken;\n        }, err => {\n          console.error(err);\n        });\n      });\n    };\n\n    var appConfig = {\n      b2cScopes: [\"https://b2cmern.onmicrosoft.com/mern/user_impersonation\"],\n      webApi: \"https://fabrikamb2chello.azurewebsites.net/hello\"\n    };\n    const msalConfig = {\n      auth: {\n        clientId: \"ce5d1a2b-20a7-4f63-adde-6f0168cc29e5\",\n        authority: \"https://b2cmern.b2clogin.com/b2cmern.onmicrosoft.com/B2C_1_signupsignin\",\n        validateAuthority: false\n      },\n      cache: {\n        cacheLocation: \"localStorage\",\n        storeAuthStateInCookie: true\n      }\n    };\n    this.loginRequest = {\n      scopes: appConfig.b2cScopes\n    }; // request to acquire a token for resource access\n\n    this.tokenRequest = {\n      scopes: appConfig.b2cScopes\n    };\n    this.app = new Msal.UserAgentApplication(msalConfig);\n  }\n\n}","map":{"version":3,"sources":["D:/Projects/devconnector_2.0/client/src/utils/AuthB2C.js"],"names":["Msal","AuthB2C","constructor","login","app","loginPopup","applicationConfig","graphScopes","then","idToken","user","getUser","logout","getToken","acquireTokenSilent","accessToken","error","acquireTokenPopup","err","console","appConfig","b2cScopes","webApi","msalConfig","auth","clientId","authority","validateAuthority","cache","cacheLocation","storeAuthStateInCookie","loginRequest","scopes","tokenRequest","UserAgentApplication"],"mappings":"AAAA,OAAO,KAAKA,IAAZ,MAAsB,MAAtB;AAEA,eAAe,MAAMC,OAAN,CAAc;AACzBC,EAAAA,WAAW,GAAG;AAAA,SA+BdC,KA/Bc,GA+BN,MAAM;AACV;AACA;AACA;AAEA;AACA;AACA;AAEA,aAAO,KAAKC,GAAL,CAASC,UAAT,CAAoB,KAAKC,iBAAL,CAAuBC,WAA3C,EAAwDC,IAAxD,CACHC,OAAO,IAAI;AACP,cAAMC,IAAI,GAAG,KAAKN,GAAL,CAASO,OAAT,EAAb;;AACA,YAAID,IAAJ,EAAU;AACN,iBAAOA,IAAP;AACH,SAFD,MAEO;AACH,iBAAO,IAAP;AACH;AACJ,OARE,EASH,MAAM;AACF,eAAO,IAAP;AACH,OAXE,CAAP;AAaH,KArDa;;AAAA,SAuDdE,MAvDc,GAuDL,MAAM;AACX,WAAKR,GAAL,CAASQ,MAAT;AACH,KAzDa;;AAAA,SA2DdC,QA3Dc,GA2DH,MAAM;AACb,aAAO,KAAKT,GAAL,CAASU,kBAAT,CAA4B,KAAKR,iBAAL,CAAuBC,WAAnD,EAAgEC,IAAhE,CACHO,WAAW,IAAI;AACX,eAAOA,WAAP;AACH,OAHE,EAIHC,KAAK,IAAI;AACL,eAAO,KAAKZ,GAAL,CACFa,iBADE,CACgB,KAAKX,iBAAL,CAAuBC,WADvC,EAEFC,IAFE,CAGCO,WAAW,IAAI;AACX,iBAAOA,WAAP;AACH,SALF,EAMCG,GAAG,IAAI;AACHC,UAAAA,OAAO,CAACH,KAAR,CAAcE,GAAd;AACH,SARF,CAAP;AAUH,OAfE,CAAP;AAiBH,KA7Ea;;AAEV,QAAIE,SAAS,GAAG;AACZC,MAAAA,SAAS,EAAE,CAAC,yDAAD,CADC;AAEZC,MAAAA,MAAM,EAAE;AAFI,KAAhB;AAKA,UAAMC,UAAU,GAAG;AACfC,MAAAA,IAAI,EAAE;AACFC,QAAAA,QAAQ,EAAE,sCADR;AAEFC,QAAAA,SAAS,EAAE,yEAFT;AAGFC,QAAAA,iBAAiB,EAAE;AAHjB,OADS;AAMfC,MAAAA,KAAK,EAAE;AACHC,QAAAA,aAAa,EAAE,cADZ;AAEHC,QAAAA,sBAAsB,EAAE;AAFrB;AANQ,KAAnB;AAYA,SAAKC,YAAL,GAAoB;AAChBC,MAAAA,MAAM,EAAEZ,SAAS,CAACC;AADF,KAApB,CAnBU,CAuBV;;AACA,SAAKY,YAAL,GAAoB;AAChBD,MAAAA,MAAM,EAAEZ,SAAS,CAACC;AADF,KAApB;AAIA,SAAKjB,GAAL,GAAW,IAAIJ,IAAI,CAACkC,oBAAT,CAA8BX,UAA9B,CAAX;AACH;;AA9BwB","sourcesContent":["import * as Msal from 'msal';\r\n\r\nexport default class AuthB2C {\r\n    constructor() {\r\n\r\n        var appConfig = {\r\n            b2cScopes: [\"https://b2cmern.onmicrosoft.com/mern/user_impersonation\"],\r\n            webApi: \"https://fabrikamb2chello.azurewebsites.net/hello\"\r\n          };\r\n\r\n        const msalConfig = {\r\n            auth: {\r\n                clientId: \"ce5d1a2b-20a7-4f63-adde-6f0168cc29e5\",\r\n                authority: \"https://b2cmern.b2clogin.com/b2cmern.onmicrosoft.com/B2C_1_signupsignin\",\r\n                validateAuthority: false\r\n            },\r\n            cache: {\r\n                cacheLocation: \"localStorage\",\r\n                storeAuthStateInCookie: true\r\n            }\r\n        };\r\n\r\n        this.loginRequest = {\r\n            scopes: appConfig.b2cScopes\r\n        };\r\n    \r\n        // request to acquire a token for resource access\r\n        this.tokenRequest = {\r\n            scopes: appConfig.b2cScopes\r\n        };\r\n        \r\n        this.app = new Msal.UserAgentApplication(msalConfig);\r\n    }\r\n\r\n    login = () => {\r\n        // return this.app.loginPopup(this.loginRequest).then(function (loginResponse) {\r\n        //     // getToken(tokenRequest).then(updateUI);\r\n        //     console.log(loginResponse)\r\n\r\n        // }).catch(function (error) {\r\n        //     console.error(error);\r\n        // });\r\n\r\n        return this.app.loginPopup(this.applicationConfig.graphScopes).then(\r\n            idToken => {\r\n                const user = this.app.getUser();\r\n                if (user) {\r\n                    return user;\r\n                } else {\r\n                    return null;\r\n                }\r\n            },\r\n            () => {\r\n                return null;\r\n            }\r\n        );\r\n    };\r\n\r\n    logout = () => {\r\n        this.app.logout();\r\n    };\r\n\r\n    getToken = () => {\r\n        return this.app.acquireTokenSilent(this.applicationConfig.graphScopes).then(\r\n            accessToken => {\r\n                return accessToken;\r\n            },\r\n            error => {\r\n                return this.app\r\n                    .acquireTokenPopup(this.applicationConfig.graphScopes)\r\n                    .then(\r\n                        accessToken => {\r\n                            return accessToken;\r\n                        },\r\n                        err => {\r\n                            console.error(err);\r\n                        }\r\n                    );\r\n            }\r\n        );\r\n    };\r\n}"]},"metadata":{},"sourceType":"module"}