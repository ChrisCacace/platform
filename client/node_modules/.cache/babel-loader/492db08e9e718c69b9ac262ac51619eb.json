{"ast":null,"code":"import * as Msal from 'msal';\nexport default class AuthB2C {\n  constructor() {\n    this.login = () => {\n      return this.app.loginPopup(loginRequest).then(function (loginResponse) {\n        // getToken(tokenRequest).then(updateUI);\n        console.log(loginResponse);\n      }).catch(function (error) {\n        logMessage(error);\n      }); // return this.app.loginPopup(this.applicationConfig.graphScopes).then(\n      //     idToken => {\n      //         const user = this.app.getUser();\n      //         if (user) {\n      //             return user;\n      //         } else {\n      //             return null;\n      //         }\n      //     },\n      //     () => {\n      //         return null;\n      //     }\n      // );\n    };\n\n    this.logout = () => {\n      this.app.logout();\n    };\n\n    this.getToken = () => {\n      return this.app.acquireTokenSilent(this.applicationConfig.graphScopes).then(accessToken => {\n        return accessToken;\n      }, error => {\n        return this.app.acquireTokenPopup(this.applicationConfig.graphScopes).then(accessToken => {\n          return accessToken;\n        }, err => {\n          console.error(err);\n        });\n      });\n    };\n\n    var appConfig = {\n      b2cScopes: [\"https://fabrikamb2c.onmicrosoft.com/helloapi/demo.read\"],\n      webApi: \"https://fabrikamb2chello.azurewebsites.net/hello\"\n    };\n    const msalConfig = {\n      auth: {\n        clientId: \"ce5d1a2b-20a7-4f63-adde-6f0168cc29e5\",\n        authority: \"https://b2cmern.b2clogin.com/b2cmern.onmicrosoft.com/B2C_1_signupsignin\",\n        validateAuthority: false\n      },\n      cache: {\n        cacheLocation: \"localStorage\",\n        storeAuthStateInCookie: true\n      }\n    };\n    const _loginRequest = {\n      scopes: appConfig.b2cScopes\n    }; // request to acquire a token for resource access\n\n    const tokenRequest = {\n      scopes: appConfig.b2cScopes\n    };\n    this.app = new Msal.UserAgentApplication(msalConfig);\n  }\n\n}","map":{"version":3,"sources":["D:/Projects/devconnector_2.0/client/src/utils/AuthB2C.js"],"names":["Msal","AuthB2C","constructor","login","app","loginPopup","loginRequest","then","loginResponse","console","log","catch","error","logMessage","logout","getToken","acquireTokenSilent","applicationConfig","graphScopes","accessToken","acquireTokenPopup","err","appConfig","b2cScopes","webApi","msalConfig","auth","clientId","authority","validateAuthority","cache","cacheLocation","storeAuthStateInCookie","scopes","tokenRequest","UserAgentApplication"],"mappings":"AAAA,OAAO,KAAKA,IAAZ,MAAsB,MAAtB;AAEA,eAAe,MAAMC,OAAN,CAAc;AACzBC,EAAAA,WAAW,GAAG;AAAA,SA+BdC,KA/Bc,GA+BN,MAAM;AACV,aAAO,KAAKC,GAAL,CAASC,UAAT,CAAoBC,YAApB,EAAkCC,IAAlC,CAAuC,UAAUC,aAAV,EAAyB;AACnE;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAYF,aAAZ;AAEH,OAJM,EAIJG,KAJI,CAIE,UAAUC,KAAV,EAAiB;AACtBC,QAAAA,UAAU,CAACD,KAAD,CAAV;AACH,OANM,CAAP,CADU,CASV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACH,KArDa;;AAAA,SAuDdE,MAvDc,GAuDL,MAAM;AACX,WAAKV,GAAL,CAASU,MAAT;AACH,KAzDa;;AAAA,SA2DdC,QA3Dc,GA2DH,MAAM;AACb,aAAO,KAAKX,GAAL,CAASY,kBAAT,CAA4B,KAAKC,iBAAL,CAAuBC,WAAnD,EAAgEX,IAAhE,CACHY,WAAW,IAAI;AACX,eAAOA,WAAP;AACH,OAHE,EAIHP,KAAK,IAAI;AACL,eAAO,KAAKR,GAAL,CACFgB,iBADE,CACgB,KAAKH,iBAAL,CAAuBC,WADvC,EAEFX,IAFE,CAGCY,WAAW,IAAI;AACX,iBAAOA,WAAP;AACH,SALF,EAMCE,GAAG,IAAI;AACHZ,UAAAA,OAAO,CAACG,KAAR,CAAcS,GAAd;AACH,SARF,CAAP;AAUH,OAfE,CAAP;AAiBH,KA7Ea;;AAEV,QAAIC,SAAS,GAAG;AACZC,MAAAA,SAAS,EAAE,CAAC,wDAAD,CADC;AAEZC,MAAAA,MAAM,EAAE;AAFI,KAAhB;AAKA,UAAMC,UAAU,GAAG;AACfC,MAAAA,IAAI,EAAE;AACFC,QAAAA,QAAQ,EAAE,sCADR;AAEFC,QAAAA,SAAS,EAAE,yEAFT;AAGFC,QAAAA,iBAAiB,EAAE;AAHjB,OADS;AAMfC,MAAAA,KAAK,EAAE;AACHC,QAAAA,aAAa,EAAE,cADZ;AAEHC,QAAAA,sBAAsB,EAAE;AAFrB;AANQ,KAAnB;AAYA,UAAM1B,aAAY,GAAG;AACjB2B,MAAAA,MAAM,EAAEX,SAAS,CAACC;AADD,KAArB,CAnBU,CAuBV;;AACA,UAAMW,YAAY,GAAG;AACjBD,MAAAA,MAAM,EAAEX,SAAS,CAACC;AADD,KAArB;AAIA,SAAKnB,GAAL,GAAW,IAAIJ,IAAI,CAACmC,oBAAT,CAA8BV,UAA9B,CAAX;AACH;;AA9BwB","sourcesContent":["import * as Msal from 'msal';\r\n\r\nexport default class AuthB2C {\r\n    constructor() {\r\n\r\n        var appConfig = {\r\n            b2cScopes: [\"https://fabrikamb2c.onmicrosoft.com/helloapi/demo.read\"],\r\n            webApi: \"https://fabrikamb2chello.azurewebsites.net/hello\"\r\n          };\r\n          \r\n        const msalConfig = {\r\n            auth: {\r\n                clientId: \"ce5d1a2b-20a7-4f63-adde-6f0168cc29e5\",\r\n                authority: \"https://b2cmern.b2clogin.com/b2cmern.onmicrosoft.com/B2C_1_signupsignin\",\r\n                validateAuthority: false\r\n            },\r\n            cache: {\r\n                cacheLocation: \"localStorage\",\r\n                storeAuthStateInCookie: true\r\n            }\r\n        };\r\n\r\n        const loginRequest = {\r\n            scopes: appConfig.b2cScopes\r\n        };\r\n    \r\n        // request to acquire a token for resource access\r\n        const tokenRequest = {\r\n            scopes: appConfig.b2cScopes\r\n        };\r\n        \r\n        this.app = new Msal.UserAgentApplication(msalConfig);\r\n    }\r\n\r\n    login = () => {\r\n        return this.app.loginPopup(loginRequest).then(function (loginResponse) {\r\n            // getToken(tokenRequest).then(updateUI);\r\n            console.log(loginResponse)\r\n\r\n        }).catch(function (error) {\r\n            logMessage(error);\r\n        });\r\n\r\n        // return this.app.loginPopup(this.applicationConfig.graphScopes).then(\r\n        //     idToken => {\r\n        //         const user = this.app.getUser();\r\n        //         if (user) {\r\n        //             return user;\r\n        //         } else {\r\n        //             return null;\r\n        //         }\r\n        //     },\r\n        //     () => {\r\n        //         return null;\r\n        //     }\r\n        // );\r\n    };\r\n\r\n    logout = () => {\r\n        this.app.logout();\r\n    };\r\n\r\n    getToken = () => {\r\n        return this.app.acquireTokenSilent(this.applicationConfig.graphScopes).then(\r\n            accessToken => {\r\n                return accessToken;\r\n            },\r\n            error => {\r\n                return this.app\r\n                    .acquireTokenPopup(this.applicationConfig.graphScopes)\r\n                    .then(\r\n                        accessToken => {\r\n                            return accessToken;\r\n                        },\r\n                        err => {\r\n                            console.error(err);\r\n                        }\r\n                    );\r\n            }\r\n        );\r\n    };\r\n}"]},"metadata":{},"sourceType":"module"}