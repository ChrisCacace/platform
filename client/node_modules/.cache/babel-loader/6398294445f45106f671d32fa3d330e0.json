{"ast":null,"code":"import * as Msal from 'msal'; // export default function Auth() {\n\nconst config = {\n  auth: {\n    clientId: \"ce5d1a2b-20a7-4f63-adde-6f0168cc29e5\",\n    authority: \"https://b2cmern.b2clogin.com/b2cmern.onmicrosoft.com/B2C_1_signupsignin\",\n    redirectUri: 'http://localhost:3000',\n    validateAuthority: false,\n    navigateToLoginRequestUrl: false\n  },\n  cache: {\n    cacheLocation: \"localStorage\",\n    storeAuthStateInCookie: true\n  }\n};\nconst loginRequest = {\n  scopes: [\"https://b2cmern.onmicrosoft.com/mern/demo.read\"],\n  loginHint: null\n};\n\nconst requiresInteraction = errorMessage => {\n  if (!errorMessage || !errorMessage.length) {\n    return false;\n  }\n\n  return errorMessage.indexOf(\"consent_required\") > -1 || errorMessage.indexOf(\"interaction_required\") > -1 || errorMessage.indexOf(\"login_required\") > -1;\n};\n\nlet context = new Msal.UserAgentApplication(config);\ncontext.handleRedirectCallback(error => {\n  if (error) {\n    const errorMessage = error.errorMessage ? error.errorMessage : \"Unable to acquire access token.\";\n    console.error(errorMessage);\n  }\n});\nexport const b2cSignOut = () => {\n  context.logout();\n};\nexport const acquireToken = () => {\n  return context.acquireTokenSilent(loginRequest).catch(error => {\n    if (requiresInteraction(error.errorCode)) {\n      return context.acquireTokenRedirect(loginRequest);\n    } else {\n      console.error('Non-interactive error:', error.errorCode);\n    }\n  });\n}; // export const b2cGetAccount = () => {\n//     if (context.getAccount()) {\n//         context.acquireTokenSilent(loginRequest).then((response) => {\n//             if (response.accessToken) {\n//                 // console.log('response.accessToken');\n//                 // console.log(response.accessToken);\n//                 return response.accessToken;\n//             }\n//         }).catch((_error) => {\n//             context.acquireTokenRedirect(loginRequest);\n//         });\n//     } else {\n//         return null;\n//     }\n// }\n\nexport const b2cSignIn = () => {\n  context.loginRedirect(loginRequest);\n}; // }","map":{"version":3,"sources":["D:/Projects/devconnector_2.0/client/src/utils/AuthPromise.js"],"names":["Msal","config","auth","clientId","authority","redirectUri","validateAuthority","navigateToLoginRequestUrl","cache","cacheLocation","storeAuthStateInCookie","loginRequest","scopes","loginHint","requiresInteraction","errorMessage","length","indexOf","context","UserAgentApplication","handleRedirectCallback","error","console","b2cSignOut","logout","acquireToken","acquireTokenSilent","catch","errorCode","acquireTokenRedirect","b2cSignIn","loginRedirect"],"mappings":"AAAA,OAAO,KAAKA,IAAZ,MAAsB,MAAtB,C,CAEA;;AAEA,MAAMC,MAAM,GAAG;AACXC,EAAAA,IAAI,EAAE;AACFC,IAAAA,QAAQ,EAAE,sCADR;AAEFC,IAAAA,SAAS,EAAE,yEAFT;AAGFC,IAAAA,WAAW,EAAE,uBAHX;AAIFC,IAAAA,iBAAiB,EAAE,KAJjB;AAKFC,IAAAA,yBAAyB,EAAE;AALzB,GADK;AAQXC,EAAAA,KAAK,EAAE;AACHC,IAAAA,aAAa,EAAE,cADZ;AAEHC,IAAAA,sBAAsB,EAAE;AAFrB;AARI,CAAf;AAcA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,MAAM,EAAE,CAAC,gDAAD,CADS;AAEjBC,EAAAA,SAAS,EAAE;AAFM,CAArB;;AAMA,MAAMC,mBAAmB,GAAGC,YAAY,IAAI;AACxC,MAAI,CAACA,YAAD,IAAiB,CAACA,YAAY,CAACC,MAAnC,EAA2C;AACvC,WAAO,KAAP;AACH;;AAED,SACID,YAAY,CAACE,OAAb,CAAqB,kBAArB,IAA2C,CAAC,CAA5C,IACAF,YAAY,CAACE,OAAb,CAAqB,sBAArB,IAA+C,CAAC,CADhD,IAEAF,YAAY,CAACE,OAAb,CAAqB,gBAArB,IAAyC,CAAC,CAH9C;AAKH,CAVD;;AAYA,IAAIC,OAAO,GAAG,IAAIlB,IAAI,CAACmB,oBAAT,CAA8BlB,MAA9B,CAAd;AACAiB,OAAO,CAACE,sBAAR,CAAgCC,KAAD,IAAW;AACtC,MAAIA,KAAJ,EAAW;AACP,UAAMN,YAAY,GAAGM,KAAK,CAACN,YAAN,GAAqBM,KAAK,CAACN,YAA3B,GAA0C,iCAA/D;AACAO,IAAAA,OAAO,CAACD,KAAR,CAAcN,YAAd;AACH;AACJ,CALD;AAOA,OAAO,MAAMQ,UAAU,GAAG,MAAM;AAC5BL,EAAAA,OAAO,CAACM,MAAR;AACH,CAFM;AAIP,OAAO,MAAMC,YAAY,GAAG,MAAM;AAC9B,SAAOP,OAAO,CAACQ,kBAAR,CAA2Bf,YAA3B,EACFgB,KADE,CACIN,KAAK,IAAI;AACZ,QAAIP,mBAAmB,CAACO,KAAK,CAACO,SAAP,CAAvB,EAA0C;AACtC,aAAOV,OAAO,CAACW,oBAAR,CAA6BlB,YAA7B,CAAP;AACH,KAFD,MAEO;AACHW,MAAAA,OAAO,CAACD,KAAR,CAAc,wBAAd,EAAwCA,KAAK,CAACO,SAA9C;AACH;AACJ,GAPE,CAAP;AAQH,CATM,C,CAWP;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;AAEA,OAAO,MAAME,SAAS,GAAG,MAAM;AACfZ,EAAAA,OAAO,CAACa,aAAR,CAAsBpB,YAAtB;AAEf,CAHM,C,CAIP","sourcesContent":["import * as Msal from 'msal';\r\n\r\n// export default function Auth() {\r\n\r\nconst config = {\r\n    auth: {\r\n        clientId: \"ce5d1a2b-20a7-4f63-adde-6f0168cc29e5\",\r\n        authority: \"https://b2cmern.b2clogin.com/b2cmern.onmicrosoft.com/B2C_1_signupsignin\",\r\n        redirectUri: 'http://localhost:3000',\r\n        validateAuthority: false,\r\n        navigateToLoginRequestUrl: false\r\n    },\r\n    cache: {\r\n        cacheLocation: \"localStorage\",\r\n        storeAuthStateInCookie: true\r\n    }\r\n};\r\n\r\nconst loginRequest = {\r\n    scopes: [\"https://b2cmern.onmicrosoft.com/mern/demo.read\"],\r\n    loginHint: null\r\n};\r\n\r\n\r\nconst requiresInteraction = errorMessage => {\r\n    if (!errorMessage || !errorMessage.length) {\r\n        return false;\r\n    }\r\n\r\n    return (\r\n        errorMessage.indexOf(\"consent_required\") > -1 ||\r\n        errorMessage.indexOf(\"interaction_required\") > -1 ||\r\n        errorMessage.indexOf(\"login_required\") > -1\r\n    );\r\n};\r\n\r\nlet context = new Msal.UserAgentApplication(config);\r\ncontext.handleRedirectCallback((error) => {\r\n    if (error) {\r\n        const errorMessage = error.errorMessage ? error.errorMessage : \"Unable to acquire access token.\";\r\n        console.error(errorMessage);\r\n    }\r\n});\r\n\r\nexport const b2cSignOut = () => {\r\n    context.logout();\r\n}\r\n\r\nexport const acquireToken = () => {\r\n    return context.acquireTokenSilent(loginRequest)\r\n        .catch(error => {\r\n            if (requiresInteraction(error.errorCode)) {\r\n                return context.acquireTokenRedirect(loginRequest);\r\n            } else {\r\n                console.error('Non-interactive error:', error.errorCode)\r\n            }\r\n        });\r\n}\r\n\r\n// export const b2cGetAccount = () => {\r\n//     if (context.getAccount()) {\r\n//         context.acquireTokenSilent(loginRequest).then((response) => {\r\n//             if (response.accessToken) {\r\n//                 // console.log('response.accessToken');\r\n//                 // console.log(response.accessToken);\r\n\r\n//                 return response.accessToken;\r\n//             }\r\n//         }).catch((_error) => {\r\n//             context.acquireTokenRedirect(loginRequest);\r\n//         });\r\n//     } else {\r\n\r\n//         return null;\r\n//     }\r\n// }\r\n\r\nexport const b2cSignIn = () => {\r\n                context.loginRedirect(loginRequest);\r\n        \r\n}   \r\n// }"]},"metadata":{},"sourceType":"module"}