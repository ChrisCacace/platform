{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar Utils_1 = require(\"./Utils\");\n\nvar ErrorMessage_1 = require(\"./ErrorMessage\");\n\nvar XHRClient_1 = require(\"./XHRClient\");\n/**\r\n * Copyright (c) Microsoft Corporation\r\n *  All Rights Reserved\r\n *  MIT License\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy of this\r\n * software and associated documentation files (the 'Software'), to deal in the Software\r\n * without restriction, including without limitation the rights to use, copy, modify,\r\n * merge, publish, distribute, sublicense, and/or sell copies of the Software, and to\r\n * permit persons to whom the Software is furnished to do so, subject to the following\r\n * conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be\r\n * included in all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\r\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS\r\n * OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\r\n * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT\r\n * OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\n\n/*\r\n * @hidden\r\n */\n\n\nvar AuthorityType;\n\n(function (AuthorityType) {\n  AuthorityType[AuthorityType[\"Aad\"] = 0] = \"Aad\";\n  AuthorityType[AuthorityType[\"Adfs\"] = 1] = \"Adfs\";\n  AuthorityType[AuthorityType[\"B2C\"] = 2] = \"B2C\";\n})(AuthorityType = exports.AuthorityType || (exports.AuthorityType = {}));\n/*\r\n * @hidden\r\n */\n\n\nvar Authority =\n/** @class */\nfunction () {\n  function Authority(authority, validateAuthority) {\n    this.IsValidationEnabled = validateAuthority;\n    this.CanonicalAuthority = authority;\n    this.validateAsUri();\n  }\n\n  Object.defineProperty(Authority.prototype, \"Tenant\", {\n    get: function get() {\n      return this.CanonicalAuthorityUrlComponents.PathSegments[0];\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Authority.prototype, \"AuthorizationEndpoint\", {\n    get: function get() {\n      this.validateResolved();\n      return this.tenantDiscoveryResponse.AuthorizationEndpoint.replace(\"{tenant}\", this.Tenant);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Authority.prototype, \"EndSessionEndpoint\", {\n    get: function get() {\n      this.validateResolved();\n      return this.tenantDiscoveryResponse.EndSessionEndpoint.replace(\"{tenant}\", this.Tenant);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Authority.prototype, \"SelfSignedJwtAudience\", {\n    get: function get() {\n      this.validateResolved();\n      return this.tenantDiscoveryResponse.Issuer.replace(\"{tenant}\", this.Tenant);\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  Authority.prototype.validateResolved = function () {\n    if (!this.tenantDiscoveryResponse) {\n      throw \"Please call ResolveEndpointsAsync first\";\n    }\n  };\n\n  Object.defineProperty(Authority.prototype, \"CanonicalAuthority\", {\n    /*\r\n     * A URL that is the authority set by the developer\r\n     */\n    get: function get() {\n      return this.canonicalAuthority;\n    },\n    set: function set(url) {\n      this.canonicalAuthority = Utils_1.Utils.CanonicalizeUri(url);\n      this.canonicalAuthorityUrlComponents = null;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Authority.prototype, \"CanonicalAuthorityUrlComponents\", {\n    get: function get() {\n      if (!this.canonicalAuthorityUrlComponents) {\n        this.canonicalAuthorityUrlComponents = Utils_1.Utils.GetUrlComponents(this.CanonicalAuthority);\n      }\n\n      return this.canonicalAuthorityUrlComponents;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Authority.prototype, \"DefaultOpenIdConfigurationEndpoint\", {\n    /*\r\n     * // http://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata\r\n     */\n    get: function get() {\n      return this.CanonicalAuthority + \"v2.0/.well-known/openid-configuration\";\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /*\r\n   * Given a string, validate that it is of the form https://domain/path\r\n   */\n\n  Authority.prototype.validateAsUri = function () {\n    var components;\n\n    try {\n      components = this.CanonicalAuthorityUrlComponents;\n    } catch (e) {\n      throw ErrorMessage_1.ErrorMessage.invalidAuthorityType;\n    }\n\n    if (!components.Protocol || components.Protocol.toLowerCase() !== \"https:\") {\n      throw ErrorMessage_1.ErrorMessage.authorityUriInsecure;\n    }\n\n    if (!components.PathSegments || components.PathSegments.length < 1) {\n      throw ErrorMessage_1.ErrorMessage.authorityUriInvalidPath;\n    }\n  };\n  /*\r\n   * Calls the OIDC endpoint and returns the response\r\n   */\n\n\n  Authority.prototype.DiscoverEndpoints = function (openIdConfigurationEndpoint) {\n    var client = new XHRClient_1.XhrClient();\n    return client.sendRequestAsync(openIdConfigurationEndpoint, \"GET\",\n    /*enableCaching: */\n    true).then(function (response) {\n      return {\n        AuthorizationEndpoint: response.authorization_endpoint,\n        EndSessionEndpoint: response.end_session_endpoint,\n        Issuer: response.issuer\n      };\n    });\n  };\n  /*\r\n   * Returns a promise.\r\n   * Checks to see if the authority is in the cache\r\n   * Discover endpoints via openid-configuration\r\n   * If successful, caches the endpoint for later use in OIDC\r\n   */\n\n\n  Authority.prototype.ResolveEndpointsAsync = function () {\n    var _this = this;\n\n    var openIdConfigurationEndpoint = \"\";\n    return this.GetOpenIdConfigurationEndpointAsync().then(function (openIdConfigurationEndpointResponse) {\n      openIdConfigurationEndpoint = openIdConfigurationEndpointResponse;\n      return _this.DiscoverEndpoints(openIdConfigurationEndpoint);\n    }).then(function (tenantDiscoveryResponse) {\n      _this.tenantDiscoveryResponse = tenantDiscoveryResponse;\n      return _this;\n    });\n  };\n\n  return Authority;\n}();\n\nexports.Authority = Authority;","map":null,"metadata":{},"sourceType":"script"}