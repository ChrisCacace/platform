{"ast":null,"code":"\"use strict\";\n/**\r\n * Copyright (c) Microsoft Corporation\r\n *  All Rights Reserved\r\n *  MIT License\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy of this\r\n * software and associated documentation files (the 'Software'), to deal in the Software\r\n * without restriction, including without limitation the rights to use, copy, modify,\r\n * merge, publish, distribute, sublicense, and/or sell copies of the Software, and to\r\n * permit persons to whom the Software is furnished to do so, subject to the following\r\n * conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be\r\n * included in all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\r\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS\r\n * OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\r\n * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT\r\n * OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/*\r\n * XHR client for JSON endpoints\r\n * https://www.npmjs.com/package/async-promise\r\n * @hidden\r\n */\n\nvar XhrClient =\n/** @class */\nfunction () {\n  function XhrClient() {}\n\n  XhrClient.prototype.sendRequestAsync = function (url, method, enableCaching) {\n    var _this = this;\n\n    return new Promise(function (resolve, reject) {\n      var xhr = new XMLHttpRequest();\n      xhr.open(method, url,\n      /*async: */\n      true);\n\n      if (enableCaching) {// TODO: (shivb) ensure that this can be cached\n        // xhr.setRequestHeader(\"Cache-Control\", \"Public\");\n      }\n\n      xhr.onload = function (ev) {\n        if (xhr.status < 200 || xhr.status >= 300) {\n          reject(_this.handleError(xhr.responseText));\n        }\n\n        try {\n          var jsonResponse = JSON.parse(xhr.responseText);\n        } catch (e) {\n          reject(_this.handleError(xhr.responseText));\n        }\n\n        resolve(jsonResponse);\n      };\n\n      xhr.onerror = function (ev) {\n        reject(xhr.status);\n      };\n\n      if (method === \"GET\") {\n        xhr.send();\n      } else {\n        throw \"not implemented\";\n      }\n    });\n  };\n\n  XhrClient.prototype.handleError = function (responseText) {\n    var jsonResponse;\n\n    try {\n      jsonResponse = JSON.parse(responseText);\n\n      if (jsonResponse.error) {\n        return jsonResponse.error;\n      } else {\n        throw responseText;\n      }\n    } catch (e) {\n      return responseText;\n    }\n  };\n\n  return XhrClient;\n}();\n\nexports.XhrClient = XhrClient;","map":null,"metadata":{},"sourceType":"script"}