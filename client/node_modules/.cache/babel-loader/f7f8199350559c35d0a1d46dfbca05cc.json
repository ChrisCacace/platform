{"ast":null,"code":"\"use strict\";\n/**\r\n * Copyright (c) Microsoft Corporation\r\n *  All Rights Reserved\r\n *  MIT License\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy of this\r\n * software and associated documentation files (the 'Software'), to deal in the Software\r\n * without restriction, including without limitation the rights to use, copy, modify,\r\n * merge, publish, distribute, sublicense, and/or sell copies of the Software, and to\r\n * permit persons to whom the Software is furnished to do so, subject to the following\r\n * conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be\r\n * included in all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\r\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS\r\n * OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\r\n * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT\r\n * OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tslib_1 = require(\"tslib\");\n\nvar Authority_1 = require(\"./Authority\");\n\nvar XHRClient_1 = require(\"./XHRClient\");\n/**\r\n * @hidden\r\n */\n\n\nvar AadAuthority =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(AadAuthority, _super);\n\n  function AadAuthority(authority, validateAuthority) {\n    return _super.call(this, authority, validateAuthority) || this;\n  }\n\n  Object.defineProperty(AadAuthority.prototype, \"AadInstanceDiscoveryEndpointUrl\", {\n    get: function get() {\n      return AadAuthority.AadInstanceDiscoveryEndpoint + \"?api-version=1.0&authorization_endpoint=\" + this.CanonicalAuthority + \"oauth2/v2.0/authorize\";\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AadAuthority.prototype, \"AuthorityType\", {\n    get: function get() {\n      return Authority_1.AuthorityType.Aad;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Returns a promise which resolves to the OIDC endpoint\r\n   * Only responds with the endpoint\r\n   */\n\n  AadAuthority.prototype.GetOpenIdConfigurationEndpointAsync = function () {\n    var _this = this;\n\n    var resultPromise = new Promise(function (resolve, reject) {\n      return resolve(_this.DefaultOpenIdConfigurationEndpoint);\n    });\n\n    if (!this.IsValidationEnabled) {\n      return resultPromise;\n    }\n\n    var host = this.CanonicalAuthorityUrlComponents.HostNameAndPort;\n\n    if (this.IsInTrustedHostList(host)) {\n      return resultPromise;\n    }\n\n    var client = new XHRClient_1.XhrClient();\n    return client.sendRequestAsync(this.AadInstanceDiscoveryEndpointUrl, \"GET\", true).then(function (response) {\n      return response.tenant_discovery_endpoint;\n    });\n  };\n  /**\r\n   * Checks to see if the host is in a list of trusted hosts\r\n   * @param {string} The host to look up\r\n   */\n\n\n  AadAuthority.prototype.IsInTrustedHostList = function (host) {\n    return AadAuthority.TrustedHostList[host.toLowerCase()];\n  };\n\n  AadAuthority.AadInstanceDiscoveryEndpoint = \"https://login.microsoftonline.com/common/discovery/instance\";\n  AadAuthority.TrustedHostList = {\n    \"login.windows.net\": \"login.windows.net\",\n    \"login.chinacloudapi.cn\": \"login.chinacloudapi.cn\",\n    \"login.cloudgovapi.us\": \"login.cloudgovapi.us\",\n    \"login.microsoftonline.com\": \"login.microsoftonline.com\",\n    \"login.microsoftonline.de\": \"login.microsoftonline.de\",\n    \"login.microsoftonline.us\": \"login.microsoftonline.us\"\n  };\n  return AadAuthority;\n}(Authority_1.Authority);\n\nexports.AadAuthority = AadAuthority;","map":null,"metadata":{},"sourceType":"script"}