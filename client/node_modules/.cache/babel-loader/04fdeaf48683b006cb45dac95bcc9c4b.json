{"ast":null,"code":"\"use strict\";\n/**\r\n * Copyright (c) Microsoft Corporation\r\n *  All Rights Reserved\r\n *  MIT License\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy of this\r\n * software and associated documentation files (the 'Software'), to deal in the Software\r\n * without restriction, including without limitation the rights to use, copy, modify,\r\n * merge, publish, distribute, sublicense, and/or sell copies of the Software, and to\r\n * permit persons to whom the Software is furnished to do so, subject to the following\r\n * conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be\r\n * included in all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\r\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS\r\n * OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\r\n * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT\r\n * OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tslib_1 = require(\"tslib\");\n\nvar AadAuthority_1 = require(\"./AadAuthority\");\n\nvar Authority_1 = require(\"./Authority\");\n\nvar ErrorMessage_1 = require(\"./ErrorMessage\");\n\nvar Utils_1 = require(\"./Utils\");\n/*\r\n * @hidden\r\n */\n\n\nvar B2cAuthority =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(B2cAuthority, _super);\n\n  function B2cAuthority(authority, validateAuthority) {\n    var _this = _super.call(this, authority, validateAuthority) || this;\n\n    var urlComponents = Utils_1.Utils.GetUrlComponents(authority);\n    var pathSegments = urlComponents.PathSegments;\n\n    if (pathSegments.length < 3) {\n      throw ErrorMessage_1.ErrorMessage.b2cAuthorityUriInvalidPath;\n    }\n\n    _this.CanonicalAuthority = \"https://\" + urlComponents.HostNameAndPort + \"/\" + pathSegments[0] + \"/\" + pathSegments[1] + \"/\" + pathSegments[2] + \"/\";\n    return _this;\n  }\n\n  Object.defineProperty(B2cAuthority.prototype, \"AuthorityType\", {\n    get: function get() {\n      return Authority_1.AuthorityType.B2C;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /*\r\n   * Returns a promise with the TenantDiscoveryEndpoint\r\n   */\n\n  B2cAuthority.prototype.GetOpenIdConfigurationEndpointAsync = function () {\n    var _this = this;\n\n    var resultPromise = new Promise(function (resolve, reject) {\n      return resolve(_this.DefaultOpenIdConfigurationEndpoint);\n    });\n\n    if (!this.IsValidationEnabled) {\n      return resultPromise;\n    }\n\n    if (this.IsInTrustedHostList(this.CanonicalAuthorityUrlComponents.HostNameAndPort)) {\n      return resultPromise;\n    }\n\n    return new Promise(function (resolve, reject) {\n      return reject(ErrorMessage_1.ErrorMessage.unsupportedAuthorityValidation);\n    });\n  };\n\n  return B2cAuthority;\n}(AadAuthority_1.AadAuthority);\n\nexports.B2cAuthority = B2cAuthority;","map":null,"metadata":{},"sourceType":"script"}