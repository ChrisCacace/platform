{"ast":null,"code":"var _jsxFileName = \"D:\\\\Projects\\\\devconnector_2.0\\\\client\\\\src\\\\utils\\\\AuthB2CProvider.js\";\nimport React, { Component } from \"react\";\nimport { msalApp, requiresInteraction, fetchMsGraph, isIE, GRAPH_ENDPOINTS, GRAPH_SCOPES, GRAPH_REQUESTS } from \"./auth-utils\"; // If you support IE, our recommendation is that you sign-in using Redirect APIs\n\nconst useRedirectFlow = isIE(); // const useRedirectFlow = true;\n\nexport default (C => class AuthB2CProvider extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      account: null,\n      error: null,\n      emailMessages: null,\n      graphProfile: null\n    };\n  }\n\n  async acquireToken(request, redirect) {\n    return msalApp.acquireTokenSilent(request).catch(error => {\n      // Call acquireTokenPopup (popup window) in case of acquireTokenSilent failure\n      // due to consent or interaction required ONLY\n      if (requiresInteraction(error.errorCode)) {\n        return redirect ? msalApp.acquireTokenRedirect(request) : msalApp.acquireTokenPopup(request);\n      } else {\n        console.error('Non-interactive error:', error.errorCode);\n      }\n    });\n  }\n\n  async onSignIn(redirect) {\n    if (redirect) {\n      return msalApp.loginRedirect(GRAPH_REQUESTS.LOGIN);\n    }\n\n    const loginResponse = await msalApp.loginPopup(GRAPH_REQUESTS.LOGIN).catch(error => {\n      this.setState({\n        error: error.message\n      });\n    });\n\n    if (loginResponse) {\n      this.setState({\n        account: loginResponse.account,\n        error: null\n      });\n      const tokenResponse = await this.acquireToken(GRAPH_REQUESTS.LOGIN).catch(error => {\n        this.setState({\n          error: error.message\n        });\n      });\n\n      if (tokenResponse) {\n        const graphProfile = await fetchMsGraph(GRAPH_ENDPOINTS.ME, tokenResponse.accessToken).catch(() => {\n          this.setState({\n            error: \"Unable to fetch Graph profile.\"\n          });\n        });\n\n        if (graphProfile) {\n          this.setState({\n            graphProfile\n          });\n        }\n\n        if (tokenResponse.scopes.indexOf(GRAPH_SCOPES.MAIL_READ) > 0) {\n          return this.readMail(tokenResponse.accessToken);\n        }\n      }\n    }\n  }\n\n  onSignOut() {\n    msalApp.logout();\n  }\n\n  async onRequestEmailToken() {\n    const tokenResponse = await this.acquireToken(GRAPH_REQUESTS.EMAIL, useRedirectFlow).catch(e => {\n      this.setState({\n        error: \"Unable to acquire access token for reading email.\"\n      });\n    });\n\n    if (tokenResponse) {\n      return this.readMail(tokenResponse.accessToken);\n    }\n  }\n\n  async readMail(accessToken) {\n    const emailMessages = await fetchMsGraph(GRAPH_ENDPOINTS.MAIL, accessToken).catch(() => {\n      this.setState({\n        error: \"Unable to fetch email messages.\"\n      });\n    });\n\n    if (emailMessages) {\n      this.setState({\n        emailMessages,\n        error: null\n      });\n    }\n  }\n\n  async componentDidMount() {\n    msalApp.handleRedirectCallback(error => {\n      if (error) {\n        const errorMessage = error.errorMessage ? error.errorMessage : \"Unable to acquire access token.\"; // setState works as long as navigateToLoginRequestUrl: false\n\n        this.setState({\n          error: errorMessage\n        });\n      }\n    });\n    const account = msalApp.getAccount();\n    this.setState({\n      account\n    });\n\n    if (account) {\n      const tokenResponse = await this.acquireToken(GRAPH_REQUESTS.LOGIN, useRedirectFlow);\n\n      if (tokenResponse) {\n        const graphProfile = await fetchMsGraph(GRAPH_ENDPOINTS.ME, tokenResponse.accessToken).catch(() => {\n          this.setState({\n            error: \"Unable to fetch Graph profile.\"\n          });\n        });\n\n        if (graphProfile) {\n          this.setState({\n            graphProfile\n          });\n        }\n\n        if (tokenResponse.scopes.indexOf(GRAPH_SCOPES.MAIL_READ) > 0) {\n          return this.readMail(tokenResponse.accessToken);\n        }\n      }\n    }\n  }\n\n  render() {\n    return React.createElement(C, Object.assign({}, this.props, {\n      account: this.state.account,\n      emailMessages: this.state.emailMessages,\n      error: this.state.error,\n      graphProfile: this.state.graphProfile,\n      onSignIn: () => this.onSignIn(useRedirectFlow),\n      onSignOut: () => this.onSignOut(),\n      onRequestEmailToken: () => this.onRequestEmailToken(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178\n      },\n      __self: this\n    }));\n  }\n\n});","map":{"version":3,"sources":["D:/Projects/devconnector_2.0/client/src/utils/AuthB2CProvider.js"],"names":["React","Component","msalApp","requiresInteraction","fetchMsGraph","isIE","GRAPH_ENDPOINTS","GRAPH_SCOPES","GRAPH_REQUESTS","useRedirectFlow","C","AuthB2CProvider","constructor","props","state","account","error","emailMessages","graphProfile","acquireToken","request","redirect","acquireTokenSilent","catch","errorCode","acquireTokenRedirect","acquireTokenPopup","console","onSignIn","loginRedirect","LOGIN","loginResponse","loginPopup","setState","message","tokenResponse","ME","accessToken","scopes","indexOf","MAIL_READ","readMail","onSignOut","logout","onRequestEmailToken","EMAIL","e","MAIL","componentDidMount","handleRedirectCallback","errorMessage","getAccount","render"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport {\r\n    msalApp,\r\n    requiresInteraction,\r\n    fetchMsGraph,\r\n    isIE,\r\n    GRAPH_ENDPOINTS,\r\n    GRAPH_SCOPES,\r\n    GRAPH_REQUESTS\r\n} from \"./auth-utils\";\r\n\r\n// If you support IE, our recommendation is that you sign-in using Redirect APIs\r\nconst useRedirectFlow = isIE();\r\n// const useRedirectFlow = true;\r\n\r\nexport default C =>\r\n    class AuthB2CProvider extends Component {\r\n        constructor(props) {\r\n            super(props);\r\n\r\n            this.state = {\r\n                account: null,\r\n                error: null,\r\n                emailMessages: null,\r\n                graphProfile: null\r\n            };\r\n        }\r\n\r\n        async acquireToken(request, redirect) {\r\n            return msalApp.acquireTokenSilent(request).catch(error => {\r\n                // Call acquireTokenPopup (popup window) in case of acquireTokenSilent failure\r\n                // due to consent or interaction required ONLY\r\n                if (requiresInteraction(error.errorCode)) {\r\n                    return redirect\r\n                        ? msalApp.acquireTokenRedirect(request)\r\n                        : msalApp.acquireTokenPopup(request);\r\n                } else {\r\n                    console.error('Non-interactive error:', error.errorCode)\r\n                }\r\n            });\r\n        }\r\n\r\n        async onSignIn(redirect) {\r\n            if (redirect) {\r\n                return msalApp.loginRedirect(GRAPH_REQUESTS.LOGIN);\r\n            }\r\n\r\n            const loginResponse = await msalApp\r\n                .loginPopup(GRAPH_REQUESTS.LOGIN)\r\n                .catch(error => {\r\n                    this.setState({\r\n                        error: error.message\r\n                    });\r\n                });\r\n\r\n            if (loginResponse) {\r\n                this.setState({\r\n                    account: loginResponse.account,\r\n                    error: null\r\n                });\r\n\r\n                const tokenResponse = await this.acquireToken(\r\n                    GRAPH_REQUESTS.LOGIN\r\n                ).catch(error => {\r\n                    this.setState({\r\n                        error: error.message\r\n                    });\r\n                });\r\n\r\n                if (tokenResponse) {\r\n                    const graphProfile = await fetchMsGraph(\r\n                        GRAPH_ENDPOINTS.ME,\r\n                        tokenResponse.accessToken\r\n                    ).catch(() => {\r\n                        this.setState({\r\n                            error: \"Unable to fetch Graph profile.\"\r\n                        });\r\n                    });\r\n\r\n                    if (graphProfile) {\r\n                        this.setState({\r\n                            graphProfile\r\n                        });\r\n                    }\r\n\r\n                    if (tokenResponse.scopes.indexOf(GRAPH_SCOPES.MAIL_READ) > 0) {\r\n                        return this.readMail(tokenResponse.accessToken);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        onSignOut() {\r\n            msalApp.logout();\r\n        }\r\n\r\n        async onRequestEmailToken() {\r\n            const tokenResponse = await this.acquireToken(\r\n                GRAPH_REQUESTS.EMAIL,\r\n                useRedirectFlow\r\n            ).catch(e => {\r\n                this.setState({\r\n                    error: \"Unable to acquire access token for reading email.\"\r\n                });\r\n            });\r\n\r\n            if (tokenResponse) {\r\n                return this.readMail(tokenResponse.accessToken);\r\n            }\r\n        }\r\n\r\n        async readMail(accessToken) {\r\n            const emailMessages = await fetchMsGraph(\r\n                GRAPH_ENDPOINTS.MAIL,\r\n                accessToken\r\n            ).catch(() => {\r\n                this.setState({\r\n                    error: \"Unable to fetch email messages.\"\r\n                });\r\n            });\r\n\r\n            if (emailMessages) {\r\n                this.setState({\r\n                    emailMessages,\r\n                    error: null\r\n                });\r\n            }\r\n        }\r\n\r\n        async componentDidMount() {\r\n            msalApp.handleRedirectCallback(error => {\r\n                if (error) {\r\n                    const errorMessage = error.errorMessage ? error.errorMessage : \"Unable to acquire access token.\";\r\n                    // setState works as long as navigateToLoginRequestUrl: false\r\n                    this.setState({\r\n                        error: errorMessage\r\n                    });\r\n                }\r\n            });\r\n\r\n            const account = msalApp.getAccount();\r\n\r\n            this.setState({\r\n                account\r\n            });\r\n\r\n            if (account) {\r\n                const tokenResponse = await this.acquireToken(\r\n                    GRAPH_REQUESTS.LOGIN,\r\n                    useRedirectFlow\r\n                );\r\n\r\n                if (tokenResponse) {\r\n                    const graphProfile = await fetchMsGraph(\r\n                        GRAPH_ENDPOINTS.ME,\r\n                        tokenResponse.accessToken\r\n                    ).catch(() => {\r\n                        this.setState({\r\n                            error: \"Unable to fetch Graph profile.\"\r\n                        });\r\n                    });\r\n\r\n                    if (graphProfile) {\r\n                        this.setState({\r\n                            graphProfile\r\n                        });\r\n                    }\r\n\r\n                    if (tokenResponse.scopes.indexOf(GRAPH_SCOPES.MAIL_READ) > 0) {\r\n                        return this.readMail(tokenResponse.accessToken);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        render() {\r\n            return (\r\n                <C\r\n                    {...this.props}\r\n                    account={this.state.account}\r\n                    emailMessages={this.state.emailMessages}\r\n                    error={this.state.error}\r\n                    graphProfile={this.state.graphProfile}\r\n                    onSignIn={() => this.onSignIn(useRedirectFlow)}\r\n                    onSignOut={() => this.onSignOut()}\r\n                    onRequestEmailToken={() => this.onRequestEmailToken()}\r\n                />\r\n            );\r\n        }\r\n    };"]},"metadata":{},"sourceType":"module"}