{"ast":null,"code":"/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nimport { ClientConfigurationError } from \"./error/ClientConfigurationError\";\n\nvar ScopeSet =\n/** @class */\nfunction () {\n  function ScopeSet() {}\n  /**\n   * Check if there are dup scopes in a given request\n   *\n   * @param cachedScopes\n   * @param scopes\n   */\n  // TODO: Rename this, intersecting scopes isn't a great name for duplicate checker\n\n\n  ScopeSet.isIntersectingScopes = function (cachedScopes, scopes) {\n    cachedScopes = this.convertToLowerCase(cachedScopes);\n\n    for (var i = 0; i < scopes.length; i++) {\n      if (cachedScopes.indexOf(scopes[i].toLowerCase()) > -1) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n  /**\n   * Check if a given scope is present in the request\n   *\n   * @param cachedScopes\n   * @param scopes\n   */\n\n\n  ScopeSet.containsScope = function (cachedScopes, scopes) {\n    cachedScopes = this.convertToLowerCase(cachedScopes);\n    return scopes.every(function (value) {\n      return cachedScopes.indexOf(value.toString().toLowerCase()) >= 0;\n    });\n  };\n  /**\n   * toLower\n   *\n   * @param scopes\n   */\n  // TODO: Rename this, too generic name for a function that only deals with scopes\n\n\n  ScopeSet.convertToLowerCase = function (scopes) {\n    return scopes.map(function (scope) {\n      return scope.toLowerCase();\n    });\n  };\n  /**\n   * remove one element from a scope array\n   *\n   * @param scopes\n   * @param scope\n   */\n  // TODO: Rename this, too generic name for a function that only deals with scopes\n\n\n  ScopeSet.removeElement = function (scopes, scope) {\n    return scopes.filter(function (value) {\n      return value !== scope;\n    });\n  };\n  /**\n   * Parse the scopes into a formatted scopeList\n   * @param scopes\n   */\n\n\n  ScopeSet.parseScope = function (scopes) {\n    var scopeList = \"\";\n\n    if (scopes) {\n      for (var i = 0; i < scopes.length; ++i) {\n        scopeList += i !== scopes.length - 1 ? scopes[i] + \" \" : scopes[i];\n      }\n    }\n\n    return scopeList;\n  };\n  /**\n   * @hidden\n   *\n   * Used to validate the scopes input parameter requested  by the developer.\n   * @param {Array<string>} scopes - Developer requested permissions. Not all scopes are guaranteed to be included in the access token returned.\n   * @param {boolean} scopesRequired - Boolean indicating whether the scopes array is required or not\n   * @ignore\n   */\n\n\n  ScopeSet.validateInputScope = function (scopes, scopesRequired, clientId) {\n    if (!scopes) {\n      if (scopesRequired) {\n        throw ClientConfigurationError.createScopesRequiredError(scopes);\n      } else {\n        return;\n      }\n    } // Check that scopes is an array object (also throws error if scopes == null)\n\n\n    if (!Array.isArray(scopes)) {\n      throw ClientConfigurationError.createScopesNonArrayError(scopes);\n    } // Check that scopes is not an empty array\n\n\n    if (scopes.length < 1) {\n      throw ClientConfigurationError.createEmptyScopesArrayError(scopes.toString());\n    } // Check that clientId is passed as single scope\n\n\n    if (scopes.indexOf(clientId) > -1) {\n      if (scopes.length > 1) {\n        throw ClientConfigurationError.createClientIdSingleScopeError(scopes.toString());\n      }\n    }\n  };\n  /**\n   * @hidden\n   *\n   * Extracts scope value from the state sent with the authentication request.\n   * @param {string} state\n   * @returns {string} scope.\n   * @ignore\n   */\n\n\n  ScopeSet.getScopeFromState = function (state) {\n    if (state) {\n      var splitIndex = state.indexOf(\"|\");\n\n      if (splitIndex > -1 && splitIndex + 1 < state.length) {\n        return state.substring(splitIndex + 1);\n      }\n    }\n\n    return \"\";\n  };\n  /**\n   * @ignore\n   * Appends extraScopesToConsent if passed\n   * @param {@link AuthenticationParameters}\n   */\n\n\n  ScopeSet.appendScopes = function (reqScopes, reqExtraScopesToConsent) {\n    if (reqScopes) {\n      return reqExtraScopesToConsent ? reqScopes.concat(reqExtraScopesToConsent) : reqScopes;\n    }\n\n    return null;\n  };\n\n  return ScopeSet;\n}();\n\nexport { ScopeSet };","map":null,"metadata":{},"sourceType":"module"}