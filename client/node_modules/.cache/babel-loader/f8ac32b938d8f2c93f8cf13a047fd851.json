{"ast":null,"code":"import * as Msal from 'msal';\nexport default function Auth() {\n  const config = {\n    auth: {\n      clientId: \"ce5d1a2b-20a7-4f63-adde-6f0168cc29e5\",\n      authority: \"https://b2cmern.b2clogin.com/b2cmern.onmicrosoft.com/B2C_1_signupsignin\",\n      validateAuthority: false,\n      navigateToLoginRequestUrl: false\n    },\n    cache: {\n      cacheLocation: \"localStorage\",\n      storeAuthStateInCookie: true\n    }\n  };\n  let context = new Msal.UserAgentApplication(config);\n  return new Promise((resolve, reject) => {\n    let scopes = {\n      scopes: ['.default', 'openid', 'profile'],\n      loginHint: null\n    };\n    context.handleRedirectCallback((error, response) => {\n      if (error) {\n        console.error(error);\n      } else if (window.parent === window) {\n        console.log(response.tokenType);\n\n        if (response.tokenType === 'access_token' && response.accessToken) {\n          resolve(response.accessToken);\n        }\n      }\n    });\n    console.log('inside the promise');\n\n    if (!context.isCallback(window.location.hash)) {\n      if (context.getAccount()) {\n        context.acquireTokenSilent(scopes).then(response => {\n          if (response.accessToken) {\n            resolve(response.accessToken);\n          }\n        }).catch(_error => {\n          context.acquireTokenRedirect(scopes);\n        });\n      } else {\n        context.loginRedirect(scopes);\n      }\n    }\n  });\n}","map":{"version":3,"sources":["D:/Projects/devconnector_2.0/client/src/utils/AuthPromise.js"],"names":["Msal","Auth","config","auth","clientId","authority","validateAuthority","navigateToLoginRequestUrl","cache","cacheLocation","storeAuthStateInCookie","context","UserAgentApplication","Promise","resolve","reject","scopes","loginHint","handleRedirectCallback","error","response","console","window","parent","log","tokenType","accessToken","isCallback","location","hash","getAccount","acquireTokenSilent","then","catch","_error","acquireTokenRedirect","loginRedirect"],"mappings":"AAAA,OAAO,KAAKA,IAAZ,MAAsB,MAAtB;AAEA,eAAe,SAASC,IAAT,GAAgB;AAE3B,QAAMC,MAAM,GAAG;AACXC,IAAAA,IAAI,EAAE;AACFC,MAAAA,QAAQ,EAAE,sCADR;AAEFC,MAAAA,SAAS,EAAE,yEAFT;AAGFC,MAAAA,iBAAiB,EAAE,KAHjB;AAIFC,MAAAA,yBAAyB,EAAE;AAJzB,KADK;AAOXC,IAAAA,KAAK,EAAE;AACHC,MAAAA,aAAa,EAAE,cADZ;AAEHC,MAAAA,sBAAsB,EAAE;AAFrB;AAPI,GAAf;AAaA,MAAIC,OAAO,GAAG,IAAIX,IAAI,CAACY,oBAAT,CAA8BV,MAA9B,CAAd;AAEA,SAAO,IAAIW,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACpC,QAAIC,MAAM,GAAG;AACTA,MAAAA,MAAM,EAAE,CAAC,UAAD,EAAa,QAAb,EAAuB,SAAvB,CADC;AAETC,MAAAA,SAAS,EAAE;AAFF,KAAb;AAKAN,IAAAA,OAAO,CAACO,sBAAR,CAA+B,CAACC,KAAD,EAAQC,QAAR,KAAqB;AAChD,UAAID,KAAJ,EAAW;AACPE,QAAAA,OAAO,CAACF,KAAR,CAAcA,KAAd;AACH,OAFD,MAEO,IAAIG,MAAM,CAACC,MAAP,KAAkBD,MAAtB,EAA8B;AACjCD,QAAAA,OAAO,CAACG,GAAR,CAAYJ,QAAQ,CAACK,SAArB;;AAEA,YAAIL,QAAQ,CAACK,SAAT,KAAuB,cAAvB,IAAyCL,QAAQ,CAACM,WAAtD,EAAmE;AAC/DZ,UAAAA,OAAO,CAACM,QAAQ,CAACM,WAAV,CAAP;AACH;AACJ;AACJ,KAVD;AAYAL,IAAAA,OAAO,CAACG,GAAR,CAAY,oBAAZ;;AACA,QAAI,CAACb,OAAO,CAACgB,UAAR,CAAmBL,MAAM,CAACM,QAAP,CAAgBC,IAAnC,CAAL,EAA+C;AAC3C,UAAIlB,OAAO,CAACmB,UAAR,EAAJ,EAA0B;AACtBnB,QAAAA,OAAO,CAACoB,kBAAR,CAA2Bf,MAA3B,EAAmCgB,IAAnC,CAAyCZ,QAAD,IAAc;AAClD,cAAIA,QAAQ,CAACM,WAAb,EAA0B;AACtBZ,YAAAA,OAAO,CAACM,QAAQ,CAACM,WAAV,CAAP;AACH;AACJ,SAJD,EAIGO,KAJH,CAIUC,MAAD,IAAY;AACjBvB,UAAAA,OAAO,CAACwB,oBAAR,CAA6BnB,MAA7B;AACH,SAND;AAOH,OARD,MAQO;AACHL,QAAAA,OAAO,CAACyB,aAAR,CAAsBpB,MAAtB;AACH;AACJ;AACJ,GAhCM,CAAP;AAiCH","sourcesContent":["import * as Msal from 'msal';\r\n\r\nexport default function Auth() {\r\n\r\n    const config = {\r\n        auth: {\r\n            clientId: \"ce5d1a2b-20a7-4f63-adde-6f0168cc29e5\",\r\n            authority: \"https://b2cmern.b2clogin.com/b2cmern.onmicrosoft.com/B2C_1_signupsignin\",\r\n            validateAuthority: false,\r\n            navigateToLoginRequestUrl: false\r\n        },\r\n        cache: {\r\n            cacheLocation: \"localStorage\",\r\n            storeAuthStateInCookie: true\r\n        }\r\n    };\r\n\r\n    let context = new Msal.UserAgentApplication(config);\r\n\r\n    return new Promise((resolve, reject) => {\r\n        let scopes = {\r\n            scopes: ['.default', 'openid', 'profile'],\r\n            loginHint: null\r\n        };\r\n\r\n        context.handleRedirectCallback((error, response) => {\r\n            if (error) {\r\n                console.error(error);\r\n            } else if (window.parent === window) {\r\n                console.log(response.tokenType);\r\n\r\n                if (response.tokenType === 'access_token' && response.accessToken) {\r\n                    resolve(response.accessToken);\r\n                }\r\n            }\r\n        });\r\n\r\n        console.log('inside the promise');\r\n        if (!context.isCallback(window.location.hash)) {\r\n            if (context.getAccount()) {\r\n                context.acquireTokenSilent(scopes).then((response) => {\r\n                    if (response.accessToken) {\r\n                        resolve(response.accessToken);\r\n                    }\r\n                }).catch((_error) => {\r\n                    context.acquireTokenRedirect(scopes);\r\n                });\r\n            } else {\r\n                context.loginRedirect(scopes);\r\n            }\r\n        }\r\n    });\r\n}"]},"metadata":{},"sourceType":"module"}