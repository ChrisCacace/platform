{"ast":null,"code":"import * as Msal from 'msal'; // export default function Auth() {\n\nconst config = {\n  auth: {\n    clientId: \"ce5d1a2b-20a7-4f63-adde-6f0168cc29e5\",\n    authority: \"https://b2cmern.b2clogin.com/b2cmern.onmicrosoft.com/B2C_1_signupsignin\",\n    validateAuthority: false,\n    navigateToLoginRequestUrl: false\n  },\n  cache: {\n    cacheLocation: \"localStorage\",\n    storeAuthStateInCookie: true\n  }\n};\nlet context = new Msal.UserAgentApplication(config);\nexport const signOut = () => {\n  context.logout();\n};\nexport const b2cSignIn = () => {\n  return new Promise((resolve, reject) => {\n    let loginRequest = {\n      scopes: [\"https://b2cmern.onmicrosoft.com/mern/demo.read\"] // loginHint: null\n\n    };\n    context.handleRedirectCallback((error, response) => {\n      if (error) {\n        console.error(error);\n      } else if (window.parent === window) {\n        console.log(response.tokenType);\n\n        if (response.tokenType === 'access_token' && response.accessToken) {\n          resolve(response.accessToken);\n        }\n      }\n    });\n    console.log('inside the promise');\n\n    if (!context.isCallback(window.location.hash)) {\n      console.log('not callback');\n\n      if (context.getAccount()) {\n        context.acquireTokenSilent(loginRequest).then(response => {\n          if (response.accessToken) {\n            resolve(response.accessToken);\n          }\n        }).catch(_error => {\n          context.acquireTokenRedirect(loginRequest);\n        });\n      } else {\n        console.log('redirect');\n        context.loginRedirect(loginRequest);\n      }\n    }\n  });\n}; // }","map":{"version":3,"sources":["D:/Projects/devconnector_2.0/client/src/utils/AuthPromise.js"],"names":["Msal","config","auth","clientId","authority","validateAuthority","navigateToLoginRequestUrl","cache","cacheLocation","storeAuthStateInCookie","context","UserAgentApplication","signOut","logout","b2cSignIn","Promise","resolve","reject","loginRequest","scopes","handleRedirectCallback","error","response","console","window","parent","log","tokenType","accessToken","isCallback","location","hash","getAccount","acquireTokenSilent","then","catch","_error","acquireTokenRedirect","loginRedirect"],"mappings":"AAAA,OAAO,KAAKA,IAAZ,MAAsB,MAAtB,C,CAEA;;AAEI,MAAMC,MAAM,GAAG;AACXC,EAAAA,IAAI,EAAE;AACFC,IAAAA,QAAQ,EAAE,sCADR;AAEFC,IAAAA,SAAS,EAAE,yEAFT;AAGFC,IAAAA,iBAAiB,EAAE,KAHjB;AAIFC,IAAAA,yBAAyB,EAAE;AAJzB,GADK;AAOXC,EAAAA,KAAK,EAAE;AACHC,IAAAA,aAAa,EAAE,cADZ;AAEHC,IAAAA,sBAAsB,EAAE;AAFrB;AAPI,CAAf;AAaA,IAAIC,OAAO,GAAG,IAAIV,IAAI,CAACW,oBAAT,CAA8BV,MAA9B,CAAd;AAEA,OAAO,MAAMW,OAAO,GAAG,MAAM;AACzBF,EAAAA,OAAO,CAACG,MAAR;AACH,CAFM;AAIP,OAAO,MAAMC,SAAS,GAAG,MAAM;AAC3B,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACpC,QAAIC,YAAY,GAAG;AACfC,MAAAA,MAAM,EAAE,CAAC,gDAAD,CADO,CAEf;;AAFe,KAAnB;AAKAT,IAAAA,OAAO,CAACU,sBAAR,CAA+B,CAACC,KAAD,EAAQC,QAAR,KAAqB;AAChD,UAAID,KAAJ,EAAW;AACPE,QAAAA,OAAO,CAACF,KAAR,CAAcA,KAAd;AACH,OAFD,MAEO,IAAIG,MAAM,CAACC,MAAP,KAAkBD,MAAtB,EAA8B;AACjCD,QAAAA,OAAO,CAACG,GAAR,CAAYJ,QAAQ,CAACK,SAArB;;AAEA,YAAIL,QAAQ,CAACK,SAAT,KAAuB,cAAvB,IAAyCL,QAAQ,CAACM,WAAtD,EAAmE;AAC/DZ,UAAAA,OAAO,CAACM,QAAQ,CAACM,WAAV,CAAP;AACH;AACJ;AACJ,KAVD;AAYAL,IAAAA,OAAO,CAACG,GAAR,CAAY,oBAAZ;;AAEA,QAAI,CAAChB,OAAO,CAACmB,UAAR,CAAmBL,MAAM,CAACM,QAAP,CAAgBC,IAAnC,CAAL,EAA+C;AAC3CR,MAAAA,OAAO,CAACG,GAAR,CAAY,cAAZ;;AAEA,UAAIhB,OAAO,CAACsB,UAAR,EAAJ,EAA0B;AACtBtB,QAAAA,OAAO,CAACuB,kBAAR,CAA2Bf,YAA3B,EAAyCgB,IAAzC,CAA+CZ,QAAD,IAAc;AACxD,cAAIA,QAAQ,CAACM,WAAb,EAA0B;AACtBZ,YAAAA,OAAO,CAACM,QAAQ,CAACM,WAAV,CAAP;AACH;AACJ,SAJD,EAIGO,KAJH,CAIUC,MAAD,IAAY;AACjB1B,UAAAA,OAAO,CAAC2B,oBAAR,CAA6BnB,YAA7B;AACH,SAND;AAOH,OARD,MAQO;AACHK,QAAAA,OAAO,CAACG,GAAR,CAAY,UAAZ;AAEAhB,QAAAA,OAAO,CAAC4B,aAAR,CAAsBpB,YAAtB;AACH;AACJ;AACJ,GArCM,CAAP;AAsCH,CAvCM,C,CAwCX","sourcesContent":["import * as Msal from 'msal';\r\n\r\n// export default function Auth() {\r\n\r\n    const config = {\r\n        auth: {\r\n            clientId: \"ce5d1a2b-20a7-4f63-adde-6f0168cc29e5\",\r\n            authority: \"https://b2cmern.b2clogin.com/b2cmern.onmicrosoft.com/B2C_1_signupsignin\",\r\n            validateAuthority: false,\r\n            navigateToLoginRequestUrl: false\r\n        },\r\n        cache: {\r\n            cacheLocation: \"localStorage\",\r\n            storeAuthStateInCookie: true\r\n        }\r\n    };\r\n\r\n    let context = new Msal.UserAgentApplication(config);\r\n\r\n    export const signOut = () => {\r\n        context.logout();\r\n    }\r\n\r\n    export const b2cSignIn = () => {\r\n        return new Promise((resolve, reject) => {\r\n            let loginRequest = {\r\n                scopes: [\"https://b2cmern.onmicrosoft.com/mern/demo.read\"]\r\n                // loginHint: null\r\n            };\r\n\r\n            context.handleRedirectCallback((error, response) => {\r\n                if (error) {\r\n                    console.error(error);\r\n                } else if (window.parent === window) {\r\n                    console.log(response.tokenType);\r\n\r\n                    if (response.tokenType === 'access_token' && response.accessToken) {\r\n                        resolve(response.accessToken);\r\n                    }\r\n                }\r\n            });\r\n\r\n            console.log('inside the promise');\r\n\r\n            if (!context.isCallback(window.location.hash)) {\r\n                console.log('not callback');\r\n\r\n                if (context.getAccount()) {\r\n                    context.acquireTokenSilent(loginRequest).then((response) => {\r\n                        if (response.accessToken) {\r\n                            resolve(response.accessToken);\r\n                        }\r\n                    }).catch((_error) => {\r\n                        context.acquireTokenRedirect(loginRequest);\r\n                    });\r\n                } else {\r\n                    console.log('redirect');\r\n\r\n                    context.loginRedirect(loginRequest);\r\n                }\r\n            }\r\n        });\r\n    }\r\n// }"]},"metadata":{},"sourceType":"module"}