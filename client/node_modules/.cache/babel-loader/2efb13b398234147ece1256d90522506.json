{"ast":null,"code":"import * as Msal from 'msal'; // export default function Auth() {\n\nconst config = {\n  auth: {\n    clientId: \"ce5d1a2b-20a7-4f63-adde-6f0168cc29e5\",\n    authority: \"https://b2cmern.b2clogin.com/b2cmern.onmicrosoft.com/B2C_1_signupsignin\",\n    redirectUri: 'http://localhost:3000',\n    validateAuthority: false,\n    navigateToLoginRequestUrl: false\n  },\n  cache: {\n    cacheLocation: \"localStorage\",\n    storeAuthStateInCookie: true\n  }\n};\nconst loginRequest = {\n  scopes: [\"https://b2cmern.onmicrosoft.com/mern/demo.read\"] // loginHint: null\n\n};\nlet context = new Msal.UserAgentApplication(config);\nexport const b2cSignOut = () => {\n  context.logout();\n};\nexport const b2cGetAccount = () => {\n  if (!context.isCallback(window.location.hash)) {\n    console.log('not callback second');\n\n    if (context.getAccount()) {\n      console.log('account exists');\n      context.acquireTokenSilent(loginRequest).catch(_error => {\n        context.acquireTokenRedirect(loginRequest);\n      });\n    } else {\n      // console.log('redirect');\n      // context.loginRedirect(loginRequest);\n      console.log('empty');\n    }\n  }\n\n  return context.getAccount();\n};\nexport const b2cSignIn = () => {\n  return new Promise((resolve, reject) => {\n    context.handleRedirectCallback((error, response) => {\n      console.log('handleRedirectCallback');\n\n      if (error) {\n        console.error(error);\n      } else if (window.parent === window) {\n        console.log(response.tokenType);\n\n        if (response.tokenType === 'access_token' && response.accessToken) {\n          resolve(response.accessToken);\n        }\n      }\n    });\n    console.log('inside the promise');\n\n    if (!context.isCallback(window.location.hash)) {\n      console.log('not callback');\n\n      if (context.getAccount()) {\n        context.acquireTokenSilent(loginRequest).then(response => {\n          if (response.accessToken) {\n            resolve(response.accessToken);\n          }\n        }).catch(_error => {\n          context.acquireTokenRedirect(loginRequest);\n        });\n      } else {\n        console.log('redirect');\n        context.loginRedirect(loginRequest);\n      }\n    }\n  });\n}; // }","map":{"version":3,"sources":["D:/Projects/devconnector_2.0/client/src/utils/AuthPromise.js"],"names":["Msal","config","auth","clientId","authority","redirectUri","validateAuthority","navigateToLoginRequestUrl","cache","cacheLocation","storeAuthStateInCookie","loginRequest","scopes","context","UserAgentApplication","b2cSignOut","logout","b2cGetAccount","isCallback","window","location","hash","console","log","getAccount","acquireTokenSilent","catch","_error","acquireTokenRedirect","b2cSignIn","Promise","resolve","reject","handleRedirectCallback","error","response","parent","tokenType","accessToken","then","loginRedirect"],"mappings":"AAAA,OAAO,KAAKA,IAAZ,MAAsB,MAAtB,C,CAEA;;AAEA,MAAMC,MAAM,GAAG;AACXC,EAAAA,IAAI,EAAE;AACFC,IAAAA,QAAQ,EAAE,sCADR;AAEFC,IAAAA,SAAS,EAAE,yEAFT;AAGFC,IAAAA,WAAW,EAAE,uBAHX;AAIFC,IAAAA,iBAAiB,EAAE,KAJjB;AAKFC,IAAAA,yBAAyB,EAAE;AALzB,GADK;AAQXC,EAAAA,KAAK,EAAE;AACHC,IAAAA,aAAa,EAAE,cADZ;AAEHC,IAAAA,sBAAsB,EAAE;AAFrB;AARI,CAAf;AAcA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,MAAM,EAAE,CAAC,gDAAD,CADS,CAEjB;;AAFiB,CAArB;AAMA,IAAIC,OAAO,GAAG,IAAIb,IAAI,CAACc,oBAAT,CAA8Bb,MAA9B,CAAd;AAEA,OAAO,MAAMc,UAAU,GAAG,MAAM;AAC5BF,EAAAA,OAAO,CAACG,MAAR;AACH,CAFM;AAIP,OAAO,MAAMC,aAAa,GAAG,MAAM;AAC/B,MAAI,CAACJ,OAAO,CAACK,UAAR,CAAmBC,MAAM,CAACC,QAAP,CAAgBC,IAAnC,CAAL,EAA+C;AAC3CC,IAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ;;AAEA,QAAIV,OAAO,CAACW,UAAR,EAAJ,EAA0B;AACtBF,MAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AAEAV,MAAAA,OAAO,CAACY,kBAAR,CAA2Bd,YAA3B,EACKe,KADL,CACYC,MAAD,IAAY;AACfd,QAAAA,OAAO,CAACe,oBAAR,CAA6BjB,YAA7B;AACH,OAHL;AAIH,KAPD,MAOO;AACH;AAEA;AAEAW,MAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACH;AACJ;;AAED,SAAOV,OAAO,CAACW,UAAR,EAAP;AACH,CArBM;AAuBP,OAAO,MAAMK,SAAS,GAAG,MAAM;AAC3B,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACpCnB,IAAAA,OAAO,CAACoB,sBAAR,CAA+B,CAACC,KAAD,EAAQC,QAAR,KAAqB;AAChDb,MAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ;;AAEA,UAAIW,KAAJ,EAAW;AACPZ,QAAAA,OAAO,CAACY,KAAR,CAAcA,KAAd;AACH,OAFD,MAEO,IAAIf,MAAM,CAACiB,MAAP,KAAkBjB,MAAtB,EAA8B;AACjCG,QAAAA,OAAO,CAACC,GAAR,CAAYY,QAAQ,CAACE,SAArB;;AAEA,YAAIF,QAAQ,CAACE,SAAT,KAAuB,cAAvB,IAAyCF,QAAQ,CAACG,WAAtD,EAAmE;AAC/DP,UAAAA,OAAO,CAACI,QAAQ,CAACG,WAAV,CAAP;AACH;AACJ;AACJ,KAZD;AAcAhB,IAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;;AAEA,QAAI,CAACV,OAAO,CAACK,UAAR,CAAmBC,MAAM,CAACC,QAAP,CAAgBC,IAAnC,CAAL,EAA+C;AAC3CC,MAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;;AAEA,UAAIV,OAAO,CAACW,UAAR,EAAJ,EAA0B;AACtBX,QAAAA,OAAO,CAACY,kBAAR,CAA2Bd,YAA3B,EAAyC4B,IAAzC,CAA+CJ,QAAD,IAAc;AACxD,cAAIA,QAAQ,CAACG,WAAb,EAA0B;AACtBP,YAAAA,OAAO,CAACI,QAAQ,CAACG,WAAV,CAAP;AACH;AACJ,SAJD,EAIGZ,KAJH,CAIUC,MAAD,IAAY;AACjBd,UAAAA,OAAO,CAACe,oBAAR,CAA6BjB,YAA7B;AACH,SAND;AAOH,OARD,MAQO;AACHW,QAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AAEAV,QAAAA,OAAO,CAAC2B,aAAR,CAAsB7B,YAAtB;AACH;AACJ;AACJ,GAlCM,CAAP;AAmCH,CApCM,C,CAqCP","sourcesContent":["import * as Msal from 'msal';\r\n\r\n// export default function Auth() {\r\n\r\nconst config = {\r\n    auth: {\r\n        clientId: \"ce5d1a2b-20a7-4f63-adde-6f0168cc29e5\",\r\n        authority: \"https://b2cmern.b2clogin.com/b2cmern.onmicrosoft.com/B2C_1_signupsignin\",\r\n        redirectUri: 'http://localhost:3000',\r\n        validateAuthority: false,\r\n        navigateToLoginRequestUrl: false\r\n    },\r\n    cache: {\r\n        cacheLocation: \"localStorage\",\r\n        storeAuthStateInCookie: true\r\n    }\r\n};\r\n\r\nconst loginRequest = {\r\n    scopes: [\"https://b2cmern.onmicrosoft.com/mern/demo.read\"]\r\n    // loginHint: null\r\n};\r\n\r\n\r\nlet context = new Msal.UserAgentApplication(config);\r\n\r\nexport const b2cSignOut = () => {\r\n    context.logout();\r\n}\r\n\r\nexport const b2cGetAccount = () => {\r\n    if (!context.isCallback(window.location.hash)) {\r\n        console.log('not callback second');\r\n\r\n        if (context.getAccount()) {\r\n            console.log('account exists');\r\n\r\n            context.acquireTokenSilent(loginRequest)\r\n                .catch((_error) => {\r\n                    context.acquireTokenRedirect(loginRequest);\r\n                });\r\n        } else {\r\n            // console.log('redirect');\r\n\r\n            // context.loginRedirect(loginRequest);\r\n\r\n            console.log('empty');\r\n        }\r\n    }\r\n\r\n    return context.getAccount();\r\n}\r\n\r\nexport const b2cSignIn = () => {\r\n    return new Promise((resolve, reject) => {\r\n        context.handleRedirectCallback((error, response) => {\r\n            console.log('handleRedirectCallback');\r\n\r\n            if (error) {\r\n                console.error(error);\r\n            } else if (window.parent === window) {\r\n                console.log(response.tokenType);\r\n\r\n                if (response.tokenType === 'access_token' && response.accessToken) {\r\n                    resolve(response.accessToken);\r\n                }\r\n            }\r\n        });\r\n\r\n        console.log('inside the promise');\r\n\r\n        if (!context.isCallback(window.location.hash)) {\r\n            console.log('not callback');\r\n\r\n            if (context.getAccount()) {\r\n                context.acquireTokenSilent(loginRequest).then((response) => {\r\n                    if (response.accessToken) {\r\n                        resolve(response.accessToken);\r\n                    }\r\n                }).catch((_error) => {\r\n                    context.acquireTokenRedirect(loginRequest);\r\n                });\r\n            } else {\r\n                console.log('redirect');\r\n\r\n                context.loginRedirect(loginRequest);\r\n            }\r\n        }\r\n    });\r\n}\r\n// }"]},"metadata":{},"sourceType":"module"}