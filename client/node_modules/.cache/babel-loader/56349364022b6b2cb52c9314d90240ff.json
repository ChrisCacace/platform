{"ast":null,"code":"\"use strict\";\n/**\r\n * Copyright (c) Microsoft Corporation\r\n *  All Rights Reserved\r\n *  MIT License\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy of this\r\n * software and associated documentation files (the 'Software'), to deal in the Software\r\n * without restriction, including without limitation the rights to use, copy, modify,\r\n * merge, publish, distribute, sublicense, and/or sell copies of the Software, and to\r\n * permit persons to whom the Software is furnished to do so, subject to the following\r\n * conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be\r\n * included in all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\r\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS\r\n * OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\r\n * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT\r\n * OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar Constants_1 = require(\"./Constants\");\n\nvar AccessTokenCacheItem_1 = require(\"./AccessTokenCacheItem\");\n/*\r\n * @hidden\r\n */\n\n\nvar Storage =\n/** @class */\nfunction () {\n  function Storage(cacheLocation) {\n    if (Storage._instance) {\n      return Storage._instance;\n    }\n\n    this._cacheLocation = cacheLocation;\n    this._localStorageSupported = typeof window[this._cacheLocation] !== \"undefined\" && window[this._cacheLocation] != null;\n    this._sessionStorageSupported = typeof window[cacheLocation] !== \"undefined\" && window[cacheLocation] != null;\n    Storage._instance = this;\n\n    if (!this._localStorageSupported && !this._sessionStorageSupported) {\n      throw new Error(\"localStorage and sessionStorage not supported\");\n    }\n\n    return Storage._instance;\n  } // add value to storage\n\n\n  Storage.prototype.setItem = function (key, value) {\n    if (window[this._cacheLocation]) {\n      window[this._cacheLocation].setItem(key, value);\n    } else {\n      throw new Error(\"localStorage and sessionStorage are not supported\");\n    }\n  }; // get one item by key from storage\n\n\n  Storage.prototype.getItem = function (key) {\n    if (window[this._cacheLocation]) {\n      return window[this._cacheLocation].getItem(key);\n    } else {\n      throw new Error(\"localStorage and sessionStorage are not supported\");\n    }\n  }; // remove value from storage\n\n\n  Storage.prototype.removeItem = function (key) {\n    if (window[this._cacheLocation]) {\n      return window[this._cacheLocation].removeItem(key);\n    } else {\n      throw new Error(\"localStorage and sessionStorage are not supported\");\n    }\n  }; // clear storage (remove all items from it)\n\n\n  Storage.prototype.clear = function () {\n    if (window[this._cacheLocation]) {\n      return window[this._cacheLocation].clear();\n    } else {\n      throw new Error(\"localStorage and sessionStorage are not supported\");\n    }\n  };\n\n  Storage.prototype.getAllAccessTokens = function (clientId, userIdentifier) {\n    var results = [];\n    var accessTokenCacheItem;\n    var storage = window[this._cacheLocation];\n\n    if (storage) {\n      var key = void 0;\n\n      for (key in storage) {\n        if (storage.hasOwnProperty(key)) {\n          if (key.match(clientId) && key.match(userIdentifier)) {\n            var value = this.getItem(key);\n\n            if (value) {\n              accessTokenCacheItem = new AccessTokenCacheItem_1.AccessTokenCacheItem(JSON.parse(key), JSON.parse(value));\n              results.push(accessTokenCacheItem);\n            }\n          }\n        }\n      }\n    } else {\n      throw new Error(\"localStorage and sessionStorage are not supported\");\n    }\n\n    return results;\n  };\n\n  Storage.prototype.removeAcquireTokenEntries = function (authorityKey, acquireTokenUserKey) {\n    var storage = window[this._cacheLocation];\n\n    if (storage) {\n      var key = void 0;\n\n      for (key in storage) {\n        if (storage.hasOwnProperty(key)) {\n          if (authorityKey != \"\" && key.indexOf(authorityKey) > -1 || acquireTokenUserKey != \"\" && key.indexOf(acquireTokenUserKey) > -1) {\n            this.removeItem(key);\n          }\n        }\n      }\n    } else {\n      throw new Error(\"localStorage and sessionStorage are not supported\");\n    }\n  };\n\n  Storage.prototype.resetCacheItems = function () {\n    var storage = window[this._cacheLocation];\n\n    if (storage) {\n      var key = void 0;\n\n      for (key in storage) {\n        if (storage.hasOwnProperty(key) && key.indexOf(Constants_1.Constants.msal) !== -1) {\n          this.setItem(key, \"\");\n        }\n\n        if (storage.hasOwnProperty(key) && key.indexOf(Constants_1.Constants.renewStatus) !== -1) this.removeItem(key);\n      }\n    } else {\n      throw new Error(\"localStorage and sessionStorage are not supported\");\n    }\n  };\n\n  return Storage;\n}();\n\nexports.Storage = Storage;","map":null,"metadata":{},"sourceType":"script"}