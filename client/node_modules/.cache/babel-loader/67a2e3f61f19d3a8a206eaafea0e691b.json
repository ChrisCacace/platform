{"ast":null,"code":"import * as Msal from 'msal'; // export default function Auth() {\n\nconst config = {\n  auth: {\n    clientId: \"ce5d1a2b-20a7-4f63-adde-6f0168cc29e5\",\n    authority: \"https://b2cmern.b2clogin.com/b2cmern.onmicrosoft.com/B2C_1_signupsignin\",\n    redirectUri: 'http://localhost:3000',\n    validateAuthority: false,\n    navigateToLoginRequestUrl: false\n  },\n  cache: {\n    cacheLocation: \"localStorage\",\n    storeAuthStateInCookie: true\n  }\n};\nconst loginRequest = {\n  scopes: [\"https://b2cmern.onmicrosoft.com/mern/demo.read\"],\n  loginHint: null\n};\nlet context = new Msal.UserAgentApplication(config);\ncontext.handleRedirectCallback((error, response) => {\n  console.log('handleRedirectCallback');\n\n  if (error) {\n    console.error(error);\n  } else if (window.parent === window) {\n    console.log(response.tokenType);\n\n    if (response.tokenType === 'access_token' && response.accessToken) {// resolve(response.accessToken);\n    }\n  }\n});\nexport const b2cSignOut = () => {\n  context.logout();\n};\nexport const acquireToken = async (request, redirect) => {\n  return context.acquireTokenSilent(request).catch(error => {\n    // Call acquireTokenPopup (popup window) in case of acquireTokenSilent failure\n    // due to consent or interaction required ONLY\n    if (requiresInteraction(error.errorCode)) {\n      return context.acquireTokenRedirect(request);\n    } else {\n      console.error('Non-interactive error:', error.errorCode);\n    }\n  });\n};\nexport const b2cGetAccount = () => {\n  if (context.getAccount()) {\n    context.acquireTokenSilent(loginRequest).then(response => {\n      if (response.accessToken) {\n        console.log('response.accessToken');\n        console.log(response.accessToken);\n        return response.accessToken;\n      }\n    }).catch(_error => {\n      context.acquireTokenRedirect(loginRequest);\n    });\n  } else {\n    return null;\n  }\n};\nexport const b2cSignIn = () => {\n  return new Promise((resolve, reject) => {\n    console.log('inside the promise');\n\n    if (!context.isCallback(window.location.hash)) {\n      console.log('not callback');\n\n      if (context.getAccount()) {\n        context.acquireTokenSilent(loginRequest).then(response => {\n          if (response.accessToken) {\n            resolve(response.accessToken);\n          }\n        }).catch(_error => {\n          context.acquireTokenRedirect(loginRequest);\n        });\n      } else {\n        console.log('redirect');\n        context.loginRedirect(loginRequest);\n      }\n    }\n  });\n}; // }","map":{"version":3,"sources":["D:/Projects/devconnector_2.0/client/src/utils/AuthPromise.js"],"names":["Msal","config","auth","clientId","authority","redirectUri","validateAuthority","navigateToLoginRequestUrl","cache","cacheLocation","storeAuthStateInCookie","loginRequest","scopes","loginHint","context","UserAgentApplication","handleRedirectCallback","error","response","console","log","window","parent","tokenType","accessToken","b2cSignOut","logout","acquireToken","request","redirect","acquireTokenSilent","catch","requiresInteraction","errorCode","acquireTokenRedirect","b2cGetAccount","getAccount","then","_error","b2cSignIn","Promise","resolve","reject","isCallback","location","hash","loginRedirect"],"mappings":"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","sourcesContent":["import * as Msal from 'msal';\r\n\r\n// export default function Auth() {\r\n\r\nconst config = {\r\n    auth: {\r\n        clientId: \"ce5d1a2b-20a7-4f63-adde-6f0168cc29e5\",\r\n        authority: \"https://b2cmern.b2clogin.com/b2cmern.onmicrosoft.com/B2C_1_signupsignin\",\r\n        redirectUri: 'http://localhost:3000',\r\n        validateAuthority: false,\r\n        navigateToLoginRequestUrl: false\r\n    },\r\n    cache: {\r\n        cacheLocation: \"localStorage\",\r\n        storeAuthStateInCookie: true\r\n    }\r\n};\r\n\r\nconst loginRequest = {\r\n    scopes: [\"https://b2cmern.onmicrosoft.com/mern/demo.read\"],\r\n    loginHint: null\r\n};\r\n\r\n\r\nlet context = new Msal.UserAgentApplication(config);\r\ncontext.handleRedirectCallback((error, response) => {\r\n    console.log('handleRedirectCallback');\r\n\r\n    if (error) {\r\n        console.error(error);\r\n    } else if (window.parent === window) {\r\n        console.log(response.tokenType);\r\n\r\n        if (response.tokenType === 'access_token' && response.accessToken) {\r\n            // resolve(response.accessToken);\r\n        }\r\n    }\r\n});\r\n\r\nexport const b2cSignOut = () => {\r\n    context.logout();\r\n}\r\n\r\n\r\nexport const acquireToken = async (request, redirect) => {\r\n    return context.acquireTokenSilent(request).catch(error => {\r\n        // Call acquireTokenPopup (popup window) in case of acquireTokenSilent failure\r\n        // due to consent or interaction required ONLY\r\n        if (requiresInteraction(error.errorCode)) {\r\n            return context.acquireTokenRedirect(request);\r\n        } else {\r\n            console.error('Non-interactive error:', error.errorCode)\r\n        }\r\n    });\r\n}\r\n\r\nexport const b2cGetAccount = () => {\r\n    if (context.getAccount()) {\r\n        context.acquireTokenSilent(loginRequest).then((response) => {\r\n            if (response.accessToken) {\r\n                console.log('response.accessToken');\r\n                console.log(response.accessToken);\r\n\r\n                return response.accessToken;\r\n            }\r\n        }).catch((_error) => {\r\n            context.acquireTokenRedirect(loginRequest);\r\n        });\r\n    } else {\r\n\r\n        return null;\r\n    }\r\n}\r\n\r\nexport const b2cSignIn = () => {\r\n    return new Promise((resolve, reject) => {\r\n        console.log('inside the promise');\r\n\r\n        if (!context.isCallback(window.location.hash)) {\r\n            console.log('not callback');\r\n\r\n            if (context.getAccount()) {\r\n                context.acquireTokenSilent(loginRequest).then((response) => {\r\n                    if (response.accessToken) {\r\n                        resolve(response.accessToken);\r\n                    }\r\n                }).catch((_error) => {\r\n                    context.acquireTokenRedirect(loginRequest);\r\n                });\r\n            } else {\r\n                console.log('redirect');\r\n\r\n                context.loginRedirect(loginRequest);\r\n            }\r\n        }\r\n    });\r\n}\r\n// }"]},"metadata":{},"sourceType":"module"}