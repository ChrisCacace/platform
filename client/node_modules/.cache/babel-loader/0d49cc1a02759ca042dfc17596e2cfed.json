{"ast":null,"code":"\"use strict\";\n/**\r\n * Copyright (c) Microsoft Corporation\r\n *  All Rights Reserved\r\n *  MIT License\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy of this\r\n * software and associated documentation files (the 'Software'), to deal in the Software\r\n * without restriction, including without limitation the rights to use, copy, modify,\r\n * merge, publish, distribute, sublicense, and/or sell copies of the Software, and to\r\n * permit persons to whom the Software is furnished to do so, subject to the following\r\n * conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be\r\n * included in all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\r\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS\r\n * OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\r\n * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT\r\n * OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/*\r\n * @hidden\r\n */\n\nvar Utils_1 = require(\"./Utils\");\n\nvar AadAuthority_1 = require(\"./AadAuthority\");\n\nvar B2cAuthority_1 = require(\"./B2cAuthority\");\n\nvar Authority_1 = require(\"./Authority\");\n\nvar ErrorMessage_1 = require(\"./ErrorMessage\");\n\nvar AuthorityFactory =\n/** @class */\nfunction () {\n  function AuthorityFactory() {}\n  /*\r\n  * Parse the url and determine the type of authority\r\n  */\n\n\n  AuthorityFactory.DetectAuthorityFromUrl = function (authorityUrl) {\n    authorityUrl = Utils_1.Utils.CanonicalizeUri(authorityUrl);\n    var components = Utils_1.Utils.GetUrlComponents(authorityUrl);\n    var pathSegments = components.PathSegments;\n\n    switch (pathSegments[0]) {\n      case \"tfp\":\n        return Authority_1.AuthorityType.B2C;\n\n      case \"adfs\":\n        return Authority_1.AuthorityType.Adfs;\n\n      default:\n        return Authority_1.AuthorityType.Aad;\n    }\n  };\n  /*\r\n  * Create an authority object of the correct type based on the url\r\n  * Performs basic authority validation - checks to see if the authority is of a valid type (eg aad, b2c)\r\n  */\n\n\n  AuthorityFactory.CreateInstance = function (authorityUrl, validateAuthority) {\n    var type = AuthorityFactory.DetectAuthorityFromUrl(authorityUrl); // Depending on above detection, create the right type.\n\n    switch (type) {\n      case Authority_1.AuthorityType.B2C:\n        return new B2cAuthority_1.B2cAuthority(authorityUrl, validateAuthority);\n\n      case Authority_1.AuthorityType.Aad:\n        return new AadAuthority_1.AadAuthority(authorityUrl, validateAuthority);\n\n      default:\n        throw ErrorMessage_1.ErrorMessage.invalidAuthorityType;\n    }\n  };\n\n  return AuthorityFactory;\n}();\n\nexports.AuthorityFactory = AuthorityFactory;","map":null,"metadata":{},"sourceType":"script"}