{"ast":null,"code":"\"use strict\";\n/**\r\n * Copyright (c) Microsoft Corporation\r\n *  All Rights Reserved\r\n *  MIT License\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy of this\r\n * software and associated documentation files (the 'Software'), to deal in the Software\r\n * without restriction, including without limitation the rights to use, copy, modify,\r\n * merge, publish, distribute, sublicense, and/or sell copies of the Software, and to\r\n * permit persons to whom the Software is furnished to do so, subject to the following\r\n * conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be\r\n * included in all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\r\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS\r\n * OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\r\n * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT\r\n * OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar Utils_1 = require(\"./Utils\");\n/*\r\n * @hidden\r\n */\n\n\nvar AuthenticationRequestParameters =\n/** @class */\nfunction () {\n  function AuthenticationRequestParameters(authority, clientId, scope, responseType, redirectUri) {\n    this.authorityInstance = authority;\n    this.clientId = clientId;\n    this.scopes = scope;\n    this.responseType = responseType;\n    this.redirectUri = redirectUri; // randomly generated values\n\n    this.correlationId = Utils_1.Utils.createNewGuid();\n    this.state = Utils_1.Utils.createNewGuid();\n    this.nonce = Utils_1.Utils.createNewGuid(); // telemetry information\n\n    this.xClientSku = \"MSAL.JS\";\n    this.xClientVer = Utils_1.Utils.getLibraryVersion();\n  }\n\n  Object.defineProperty(AuthenticationRequestParameters.prototype, \"authority\", {\n    get: function get() {\n      return this.authorityInstance.CanonicalAuthority;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  AuthenticationRequestParameters.prototype.createNavigateUrl = function (scopes) {\n    if (!scopes) {\n      scopes = [this.clientId];\n    }\n\n    if (scopes.indexOf(this.clientId) === -1) {\n      scopes.push(this.clientId);\n    }\n\n    var str = [];\n    str.push(\"response_type=\" + this.responseType);\n    this.translateclientIdUsedInScope(scopes);\n    str.push(\"scope=\" + encodeURIComponent(this.parseScope(scopes)));\n    str.push(\"client_id=\" + encodeURIComponent(this.clientId));\n    str.push(\"redirect_uri=\" + encodeURIComponent(this.redirectUri));\n    str.push(\"state=\" + encodeURIComponent(this.state));\n    str.push(\"nonce=\" + encodeURIComponent(this.nonce));\n    str.push(\"client_info=1\");\n    str.push(\"x-client-SKU=\" + this.xClientSku);\n    str.push(\"x-client-Ver=\" + this.xClientVer);\n\n    if (this.extraQueryParameters) {\n      str.push(this.extraQueryParameters);\n    }\n\n    str.push(\"client-request-id=\" + encodeURIComponent(this.correlationId));\n    var authEndpoint = this.authorityInstance.AuthorizationEndpoint; // if the endpoint already has queryparams, lets add to it, otherwise add the first one\n\n    if (authEndpoint.indexOf(\"?\") < 0) {\n      authEndpoint += \"?\";\n    } else {\n      authEndpoint += \"&\";\n    }\n\n    var requestUrl = \"\" + authEndpoint + str.join(\"&\");\n    return requestUrl;\n  };\n\n  AuthenticationRequestParameters.prototype.translateclientIdUsedInScope = function (scopes) {\n    var clientIdIndex = scopes.indexOf(this.clientId);\n\n    if (clientIdIndex >= 0) {\n      scopes.splice(clientIdIndex, 1);\n\n      if (scopes.indexOf(\"openid\") === -1) {\n        scopes.push(\"openid\");\n      }\n\n      if (scopes.indexOf(\"profile\") === -1) {\n        scopes.push(\"profile\");\n      }\n    }\n  };\n\n  AuthenticationRequestParameters.prototype.parseScope = function (scopes) {\n    var scopeList = \"\";\n\n    if (scopes) {\n      for (var i = 0; i < scopes.length; ++i) {\n        scopeList += i !== scopes.length - 1 ? scopes[i] + \" \" : scopes[i];\n      }\n    }\n\n    return scopeList;\n  };\n\n  return AuthenticationRequestParameters;\n}();\n\nexports.AuthenticationRequestParameters = AuthenticationRequestParameters;","map":null,"metadata":{},"sourceType":"script"}